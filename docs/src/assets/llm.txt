Below is all the contents of our docs: 



 This is the content for the doc .changeset/README.md 

 # Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)


 This is the content for the doc .github/PULL_REQUEST_TEMPLATE.md 

 <!-- Thank you for opening a PR! We really appreciate you taking the time to help out üôå -->

#### Description

- Closes # <!-- Add an issue number if this PR will close it. -->
- What does this PR change? Give us a brief description.
- Did you change something visual? A before/after screenshot can be helpful.

<!--
Here‚Äôs what will happen next:
One or more of our maintainers will take a look and may ask you to make changes.
We try to be responsive, but don‚Äôt worry if this takes a day or two.
-->


 This is the content for the doc CONTRIBUTING.md 

 # Contributor Manual

We welcome contributions of any size and contributors of any skill level.
As an open source project, we believe in giving back to our contributors.
We are happy to help with guidance on PRs, technical writing, and turning any feature idea into a reality.

> **Tip for new contributors:**
> Take a look at [GitHub's Docs](https://docs.github.com/en/get-started/quickstart/hello-world) for helpful information on working with GitHub.

This document is an active work in progress ‚Äî like Starlight itself! Feel free to join us in [the Astro Discord server][discord] to join the discussion. Look for the `#starlight` channel and say ‚ÄúHi!‚Äù when you arrive.

## Types of contributions

There are lots of ways to contribute to Starlight.

Maintaining Starlight requires writing Astro code, as well as addressing accessibility, styling, and UX concerns.
This repository also contains the code for the Starlight docs website.
Help writing docs, catching typos and errors, as well as translating docs into other languages is always welcome.

You can also get involved by leaving feedback on [issues][issues] or reviewing [pull requests][pulls] by other contributors.

We encourage you to:

- [**Open an issue**][new-issue] to let us know of bugs in Starlight, documentation you found unclear, or other issues you run into.

- [**Look at existing issues**][issues] (especially those labelled [‚Äúgood first issue‚Äù][gfi]) to find ways to contribute.

- **Make a pull request (PR)** to address an open issue or to fix obvious problems.
  Read more about [making a PR in GitHub‚Äôs docs][pr-docs]

- [**Review existing PRs**][pulls] to help us merge contributions sooner.

- [**Add or update translations**](#translations). We need help translating both Starlight‚Äôs UI and documentation.

## About this repo

This repo is a ‚Äúmonorepo,‚Äù meaning it contains several projects in one. It contains the Starlight docs site in [`docs/`](./docs/) and the packages that make up Starlight in [`packages/`](./packages/).

### Setting up a development environment

You can [develop locally](#developing-locally) or use an online coding development environment like [GitHub Codespaces](#developing-using-github-codespaces) or [Gitpod](#developing-using-gitpod) to get started quickly.

#### Developing locally

**Prerequisites:** Developing Starlight requires [Node.js](https://nodejs.org/en) (v16 or higher) and [pnpm](https://pnpm.io/) (v8.2 or higher). Make sure you have these installed before following these steps.

1. **Fork Starlight** to your personal GitHub account by clicking <kbd>Fork</kbd> on the [main Starlight repo page][sl].

2. **Clone your fork** of Starlight to your computer. Replace `YOUR-USERNAME` in the command below with your GitHub username to clone in a Terminal:

   ```sh
   git clone https://github.com/YOUR-USERNAME/starlight.git
   ```

3. **Change directory** to the cloned repo:

   ```sh
   cd starlight
   ```

4. **Install dependencies** with `pnpm`:

   ```sh
   pnpm i
   ```

#### Developing using Gitpod

**Prerequisites:** Developing Starlight using Gitpod requires a free [Gitpod account](https://gitpod.io).

1. **Open the Gitpod URL** [https://gitpod.io/#https://github.com/withastro/starlight](https://gitpod.io/#https://github.com/withastro/starlight). You can alternatively install a [Gitpod browser extension](https://www.gitpod.io/docs/configure/user-settings/browser-extension) which will add a "Gitpod" button when viewing [Starlight's repo on GitHub](https://github.com/withastro/starlight).

2. **Install dependencies** with `pnpm`:

   ```sh
   pnpm i
   ```

#### Developing using GitHub Codespaces

1. **Create a new codespace** via https://codespaces.new/withastro/starlight

2. If running the docs site, pass the `--host` flag to avoid ‚Äú502 Bad Gateway‚Äù errors:

   ```sh
   cd docs
   pnpm dev --host
   ```

The dev container used for GitHub Codespaces can also be used with [other supporting tools](https://containers.dev/supporting), including VS Code.

### Making a Pull Request

When making a pull request containing changes impacting users to Starlight or any related packages (`packages/*`), be sure to [add a changeset](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md#i-am-in-a-multi-package-repository-a-mono-repo) that will describe the changes to users.
Documentation-only (`docs/*`) and non-package (`examples/*`) changes do not need changesets.

```sh
pnpm exec changeset
```

## Testing

### Testing visual changes while you work

Run the Astro dev server on the docs site to see how changes you make impact a project using Starlight.

To do this, move into the `docs/` directory from the root of the repo and then run `pnpm dev`:

```sh
cd docs
pnpm dev
```

You should then be able to open <http://localhost:4321> and see your changes.

> **Note**
> Changes to the Starlight integration will require you to quit and restart the dev server to take effect.

### Check for broken links in the docs site

When adding or translating content in the Starlight docs site, you can check all internal links are valid.
All GitHub PRs are checked this way automatically, but testing locally can help if you want to confirm changes are correct before committing them.

To do this, move into the `docs/` directory from the root of the repo and then run `pnpm linkcheck`:

```sh
cd docs
pnpm linkcheck
```

If there are any broken links, the build will fail and log which pages need to be fixed.

### Unit tests

The Starlight package includes unit tests in [`packages/starlight/__tests__/`](./packages/starlight/__tests__/), which are run using [Vitest][vitest].

To run tests, move into the Starlight package and then run `pnpm test`:

```sh
cd packages/starlight
pnpm test
```

This will run tests and then listen for changes, re-running tests when files change.

#### Test environments

A lot of Starlight code relies on Vite virtual modules provided either by Astro or by Starlight itself. Each subdirectory of `packages/starlight/__tests__/` should contain a `vitest.config.ts` file that uses the `defineVitestConfig()` helper to define a valid test environment for tests in that directory. This helper takes a single argument, which provides a Starlight user config object:

```ts
// packages/starlight/__tests__/basics/vitest.config.ts
import { defineVitestConfig } from '../test-config';

export default defineVitestConfig({
  title: 'Basics',
});
```

This allows you to run tests of Starlight code against different combinations of Starlight configuration options.

#### Mocking content collections

Starlight relies on a user‚Äôs `docs` and (optional) `i18n` content collections, which aren‚Äôt available during testing. You can use a top-level `vi.mock()` call and the `mockedAstroContent` helper to set up fake collection entries for the current test file:

```js
import { describe, expect, test, vi } from 'vitest';

vi.mock('astro:content', async () =>
  (await import('../test-utils')).mockedAstroContent({
    docs: [
      ['index.mdx', { title: 'Home Page' }],
      ['environmental-impact.md', { title: 'Eco-friendly docs' }],
    ],
    i18n: [['en', { 'page.editLink': 'Modify this doc!' }]],
  })
);
```

#### Test coverage

To see how much of Starlight‚Äôs code is currently being tested, run `pnpm test:coverage` from the Starlight package:

```sh
cd packages/starlight
pnpm test:coverage
```

This will print a table to your terminal and also generate an HTML report you can load in a web browser by opening [`packages/starlight/__coverage__/index.html`](./packages/starlight/__coverage__/index.html).

### End-to-end (E2E) tests

Starlight also includes E2E tests in [`packages/starlight/__e2e__/`](./packages/starlight/__e2e__/), which are run using [Playwright][playwright].

To run these tests, move into the Starlight package and then run `pnpm test:e2e`:

```sh
cd packages/starlight
pnpm test:e2e
```

#### Test fixtures

Each subdirectory of `packages/starlight/__e2e__/fixtures` should contain the basic files needed to run Starlight (`package.json`, `astro.config.mjs`, a content collection configuration in `src/content.config.ts` and some content to render in `src/content/docs/`).

The `testFactory()` helper can be used in a test file to define the fixture which will be built and loaded in a preview server during a set of tests.

```ts
// packages/starlight/__e2e__/feature.test.ts
import { testFactory } from './test-utils';

const test = await testFactory('./fixtures/basics/');
```

This allows you to run tests against different combinations of Astro and Starlight configuration options for various content.

#### When to add E2E tests?

E2E are most useful for testing what happens on a page after it has been loaded by a browser. They run slower than unit tests so they should be used sparingly when unit tests aren‚Äôt sufficient.

## Translations

Translations help make Starlight accessible to more people.

Check out the dedicated [i18n contribution guidelines](https://contribute.docs.astro.build/guides/i18n/#quality-standards--adaptation) in the Astro docs contributor guide for more details regarding our translation process and quality standards.

### Translating Starlight‚Äôs UI

Starlight‚Äôs UI comes with some built-in text elements. For example, the table of contents on a Starlight page has a heading of ‚ÄúOn this page‚Äù and the theme picker shows ‚ÄúLight‚Äù, ‚ÄúDark‚Äù, and ‚ÄúAuto‚Äù labels. Starlight aims to provide these in as many languages as possible.

Help out by adding or updating translation files in [`packages/starlight/translations`](./packages/starlight/translations/).
Each language‚Äôs JSON file follows the [translation structure described in Starlight‚Äôs docs](https://starlight.astro.build/guides/i18n/#translate-starlights-ui).

üì∫ **Prefer a visual walkthrough?** [Watch an introduction to Starlight‚Äôs translation files.](https://scrimba.com/scrim/cpb44bt3)

### Translating Starlight‚Äôs docs

Starlight‚Äôs documentation is also translated into multiple languages. You can find the source code for the site in [the `docs/` directory](./docs/) of this repository.

Help out by:

- Reviewing [open translation PRs][pulls]
- Updating out-of-date translated pages
- Adding an untranslated page

Visit **<https://i18n.starlight.astro.build>** to track translation progress for the currently supported languages.

#### Adding a new language to Starlight‚Äôs docs

To add a language, you will need its BCP-47 tag and a label. See [‚ÄúAdding a new language‚Äù](https://contribute.docs.astro.build/guides/i18n/#adding-a-new-language) in the Astro docs contributor guide for some helpful tips around choosing these.

- Add your language to the `locales` config in `docs/astro.config.mjs`
- Add your language to the `locales` config in `docs/lunaria.config.json`
- Add your language‚Äôs subtag to the i18n label config in `.github/labeler.yml`
- Add your language to the `config.sitemap.exclude` option in `docs/__a11y__/test-utils.ts`
- Create the first translated page for your language.
  This must be the Starlight landing page: `docs/src/content/docs/{language}/index.mdx`.
- Open a pull request on GitHub to add your changes to Starlight!

## Understanding Starlight

- Starlight is built as an Astro integration.
  Read the [Astro Integration API docs][api-docs] to learn more about how integrations work.

  The Starlight integration is exported from [`packages/starlight/index.ts`](./packages/starlight/index.ts).
  It sets up Starlight‚Äôs routing logic, parses user config, and adds configuration to a Starlight user‚Äôs Astro project.

- Most pages in a Starlight project are built using a single [`packages/starlight/index.astro`](./packages/starlight/index.astro) route.
  If you‚Äôve worked on an Astro site before, much of this should look familiar: it‚Äôs an Astro component and uses a number of other components to build a page based on user content.

- Starlight consumes a user‚Äôs content from the `'docs'` [content collection](https://docs.astro.build/en/guides/content-collections/).
  This allows us to specify the permissible frontmatter via [a Starlight-specific schema](./packages/starlight/schema.ts) and get predictable data while providing clear error messages if a user sets invalid frontmatter in a page.

- Components that require JavaScript for their functionality are all written without a UI framework, most often as custom elements.
  This helps keep Starlight lightweight and makes it easier for a user to choose to add components from a framework of their choice to their project.

- Components that require client-side JavaScript or CSS should use JavaScript/CSS features that are well-supported by browsers.

  You can find a list of supported browsers and their versions using this [browserslist query](https://browsersl.ist/#q=%3E+0.5%25%2C+not+dead%2C+Chrome+%3E%3D+88%2C+Edge+%3E%3D+88%2C+Firefox+%3E%3D+98%2C+Safari+%3E%3D+15.4%2C+iOS+%3E%3D+15.4%2C+not+op_mini+all). To check whether or not a feature is supported, you can visit the [Can I use](https://caniuse.com) website and search for the feature.

[discord]: https://astro.build/chat
[issues]: https://github.com/withastro/starlight/issues
[sl]: https://github.com/withastro/starlight/pulls
[pulls]: https://github.com/withastro/starlight/pulls
[new-issue]: https://github.com/withastro/starlight/issues/new/choose
[pr-docs]: https://docs.github.com/en/get-started/quickstart/contributing-to-projects#making-a-pull-request
[gfi]: https://github.com/withastro/starlight/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+
[api-docs]: https://docs.astro.build/en/reference/integrations-reference/
[vitest]: https://vitest.dev/
[playwright]: https://playwright.dev/

## Showcase

We love to see websites built with Starlight and share them with the community on our [showcase](https://starlight.astro.build/resources/showcase/) page.
If you‚Äôve built a documentation site with Starlight, adding it to the showcase is just a pull request away!

1. Set up a development environment by following the [‚ÄúSetting up a development environment‚Äù](#setting-up-a-development-environment) instructions.
2. Add a screenshot of your site to the `docs/src/assets/showcase/` directory. The image file must:
   - Be a `.png` file and named after your site‚Äôs domain, e.g. `example.com.png`.
   - Have the dimensions of 800‚Ää√ó‚Ää450 pixels.
3. Add a new entry for your website in `docs/src/components/showcase-sites.astro`.

   - The new entry must be appended at the end of the existing list of sites.
   - The `title` attribute must be the name of your site with no extra details.
   - The `href` attribute must be the URL of your Starlight site. If your documentation is hosted on a subdomain or subdirectory, include that in the URL.
   - The `thumbnail` attribute must be the filename of the screenshot you added in step 2.

   ```diff
     <Card title="Example" href="https://example.net" thumbnail="example.net.png" />
     <Card title="Last Example" href="https://example.org" thumbnail="example.org.png" />
   + <Card title="New Example" href="https://example.com" thumbnail="example.com.png" />
   </FluidGrid>
   ```

4. Open a pull request on GitHub to add your changes.


 This is the content for the doc README.md 

 # <img src="https://github.com/withastro/starlight/assets/357379/494fcd83-42aa-4891-87e0-87402fa0b6f3" alt="" align="left" width="40" height="40"> Starlight

Starlight is a documentation website framework for [Astro][astro].

## Documentation

[Read the Starlight docs][docs] (they‚Äôre built with Starlight!)

## Support

Get help in the [Astro Discord][discord]. Post questions in our `#support` forum with the ‚Äústarlight‚Äù tag, or visit our dedicated `#starlight` channel to discuss current development and more!

You can also submit bug reports and feature requests as [GitHub issues][issues].

## Contributing

Join us as a Starlight contributor! These links will help you get started:

- [Contributor Manual][contributing]
- [Code of Conduct][coc]
- [Community Guide][community]
- [Join the `#starlight` channel on Discord][discord]

## License

MIT

Copyright (c) 2023‚Äìpresent [Starlight contributors][contributors]

[astro]: https://astro.build/
[docs]: https://starlight.astro.build/
[contributing]: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md
[coc]: https://github.com/withastro/.github/blob/main/CODE_OF_CONDUCT.md
[community]: https://github.com/withastro/.github/blob/main/COMMUNITY_GUIDE.md
[contributors]: https://github.com/withastro/starlight/graphs/contributors
[discord]: https://astro.build/chat/
[issues]: https://github.com/withastro/starlight/issues


 This is the content for the doc docs/README.md 

 # Starlight Docs

[![Built with Starlight](https://astro.badg.es/v2/built-with-starlight/tiny.svg)](https://starlight.astro.build)

This directory contains the Starlight documentation website (built with Starlight!)

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/starlight/tree/main/docs)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/starlight/tree/main/docs)

## üßû Commands

All commands are run from the root of the project, from a terminal:

| Command                 | Action                                           |
| :---------------------- | :----------------------------------------------- |
| `pnpm install`          | Installs dependencies                            |
| `pnpm run dev`          | Starts local dev server at `localhost:4321`      |
| `pnpm run build`        | Build your production site to `./dist/`          |
| `pnpm run preview`      | Preview your build locally, before deploying     |
| `pnpm run astro ...`    | Run CLI commands like `astro add`, `astro check` |
| `pnpm run astro --help` | Get help using the Astro CLI                     |

## üëÄ Want to learn more?

Feel free to check [the Astro documentation](https://docs.astro.build) or jump into the [Astro Discord server](https://astro.build/chat).


 This is the content for the doc docs/grammars/README.md 

 # Starlight Docs Grammars

This directory contains additional grammars for the Starlight documentation website.

## Grammars

The following additional grammars are generated and available for use:

- [Markdoc](https://github.com/markdoc/language-server)

## Usage

To generate the grammars from their source files, run:

```sh
pnpm grammars
```

To include the grammars in the Starlight documentation website, update the `expressiveCode.shiki.langs` array in the `astro.config.mjs` file:

```diff
starlight({
  expressiveCode: {
    shiki: {
      langs: [
        JSON.parse(
          fs.readFileSync('./grammars/existing.tmLanguage.json', 'utf-8'),
+         fs.readFileSync('./grammars/new.tmLanguage.json', 'utf-8'),
        ),
      ],
    },
  },
});
```


 This is the content for the doc docs/src/content/docs/404.md 

 ---
title: Not found
template: splash
editUrl: false
hero:
  title: '404'
  tagline: <strong>Houston, we have a problem.</strong> We couldn‚Äôt find that page.<br>Check the URL or try using the search bar.
  actions:
    - text: Go home
      icon: right-arrow
      link: /
      variant: primary
---


 This is the content for the doc docs/src/content/docs/components/asides.mdx 

 ---
title: Asides
description: Learn how to use asides in Starlight to display secondary information alongside a page‚Äôs main content.
---

import { Aside } from '@astrojs/starlight/components';

To display secondary information alongside a page‚Äôs main content, use the `<Aside>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<Aside slot="preview">
    Include nonessential, supplementary information in an `<Aside>`.
</Aside>

</Preview>

## Import

```tsx
import { Aside } from '@astrojs/starlight/components';
```

## Usage

Display an aside (also known as ‚Äúadmonitions‚Äù or ‚Äúcallouts‚Äù) using the `<Aside>` component.

An `<Aside>` can have an optional [`type`](#type) attribute, which controls the aside‚Äôs color, icon, and default title.

<Preview>

````mdx
import { Aside } from '@astrojs/starlight/components';

<Aside>Some content in an aside.</Aside>

<Aside type="caution">Some cautionary content.</Aside>

<Aside type="tip">

Other content is also supported in asides.

```js
// A code snippet, for example.
```

</Aside>

<Aside type="danger">Do not give your password to anyone.</Aside>
````

<Fragment slot="markdoc">

````markdoc
{% aside %}
Some content in an aside.
{% /aside %}

{% aside type="caution" %}
Some cautionary content.
{% /aside %}

{% aside type="tip" %}
Other content is also supported in asides.

```js
// A code snippet, for example.
```
{% /aside %}

{% aside type="danger" %}
Do not give your password to anyone.
{% /aside %}
````

</Fragment>

<Fragment slot="preview">

    <Aside>Some content in an aside.</Aside>

    <Aside type="caution">Some cautionary content.</Aside>

    <Aside type="tip">

    Other content is also supported in asides.

    ```js
    // A code snippet, for example.
    ```

    </Aside>

    <Aside type="danger">Do not give your password to anyone.</Aside>

</Fragment>

</Preview>

Starlight also provides a custom syntax for rendering asides in Markdown and MDX as an alternative to the `<Aside>` component.
See the [‚ÄúAuthoring Content in Markdown‚Äù](/guides/authoring-content/#asides) guide for details of the custom syntax.

### Use custom titles

Override the default aside titles by using the [`title`](#title) attribute.

<Preview>

```mdx 'title="Watch out!"'
import { Aside } from '@astrojs/starlight/components';

<Aside type="caution" title="Watch out!">
	A warning aside *with* a custom title.
</Aside>
```

<Fragment slot="markdoc">

```markdoc 'title="Watch out!"'
{% aside type="caution" title="Watch out!" %}
A warning aside *with* a custom title.
{% /aside %}
```

</Fragment>

<Aside slot="preview" type="caution" title="Watch out!">
	A warning aside *with* a custom title.
</Aside>

</Preview>

## `<Aside>` Props

**Implementation:** [`Aside.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Aside.astro)

The `<Aside>` component accepts the following props:

### `type`

**type:** `'note' | 'tip' | 'caution' | 'danger'`  
**default:** `'note'`

The type of aside to display:

- `note` asides (the default) are blue and display an information icon.
- `tip` asides are purple and display a rocket icon.
- `caution` asides are yellow and display a triangular warning icon.
- `danger` asides are red and display an octagonal warning icon.

### `title`

**type:** `string`

The title of the aside to display.
If `title` is not set, the default title for the current aside `type` will be used.


 This is the content for the doc docs/src/content/docs/components/badges.mdx 

 ---
title: Badges
description: Learn how to use badges in Starlight to display additional pieces of information.
---

import { Badge } from '@astrojs/starlight/components';

To display small pieces of information, such as a status or category, use the `<Badge>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<Badge slot="preview" text="New" />

</Preview>

## Import

```tsx
import { Badge } from '@astrojs/starlight/components';
```

## Usage

Display a badge using the `<Badge>` component and pass the content you want to display to the [`text`](#text) attribute of the `<Badge>` component.

By default, the badge will use the theme accent color of your site.
To use a built-in badge color, set the [`variant`](#variant) attribute to one of the supported values.

<Preview>

```mdx
import { Badge } from '@astrojs/starlight/components';

<Badge text="Note" variant="note" />
<Badge text="Success" variant="success" />
<Badge text="Tip" variant="tip" />
<Badge text="Caution" variant="caution" />
<Badge text="Danger" variant="danger" />
```

<Fragment slot="markdoc">

```markdoc
{% badge text="Note" variant="note" /%}
{% badge text="Success" variant="success" /%}
{% badge text="Tip" variant="tip" /%}
{% badge text="Caution" variant="caution" /%}
{% badge text="Danger" variant="danger" /%}
```

</Fragment>

<Fragment slot="preview">
	<Badge text="Note" variant="note" />
	<Badge text="Success" variant="success" />
	<Badge text="Tip" variant="tip" />
	<Badge text="Caution" variant="caution" />
	<Badge text="Danger" variant="danger" />
</Fragment>

</Preview>

### Use different sizes

Use the [`size`](#size) attribute to control the size of the badge text.

<Preview>

```mdx /size="\w+"/
import { Badge } from '@astrojs/starlight/components';

<Badge text="New" size="small" />
<Badge text="New and improved" size="medium" />
<Badge text="New, improved, and bigger" size="large" />
```

<Fragment slot="markdoc">

```markdoc /size="\w+"/
{% badge text="New" size="small" /%}
{% badge text="New and improved" size="medium" /%}
{% badge text="New, improved, and bigger" size="large" /%}
```

</Fragment>

<Fragment slot="preview">
	<Badge text="New" size="small" />
	<Badge text="New and improved" size="medium" />
	<Badge text="New, improved, and bigger" size="large" />
</Fragment>

</Preview>

### Customize badges

Customize badges by using any other `<span>` attributes such as `class` or `style` with custom CSS.

<Preview>

```mdx "style={{ fontStyle: 'italic' }}"
import { Badge } from '@astrojs/starlight/components';

<Badge text="Custom" variant="success" style={{ fontStyle: 'italic' }} />
```

<Fragment slot="markdoc">

```markdoc 'style="font-style: italic;"'
{% badge text="Custom" variant="success" style="font-style: italic;" /%}
```

</Fragment>

<Badge
	slot="preview"
	text="Custom"
	variant="success"
	style={{ fontStyle: 'italic' }}
/>

</Preview>

## `<Badge>` Props

**Implementation:** [`Badge.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Badge.astro)

The `<Badge>` component accepts the following props and also any [other `<span>` attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes):

### `text`

**required**  
**type:** `string`

The text content to display in the badge.

### `variant`

**type:** `'note' | 'danger' | 'success' | 'caution' | 'tip' | 'default'`  
**default:** `'default'`

The badge color variant to use: `note` (blue), `tip` (purple), `danger` (red), `caution` (orange), `success` (green), or `default` (theme accent color).

### `size`

**type:** `'small' | 'medium' | 'large'`

Defines the size of the badge to display.


 This is the content for the doc docs/src/content/docs/components/card-grids.mdx 

 ---
title: Card Grids
description: Learn how to wrap multiple cards in a grid in Starlight.
sidebar:
  order: 4
---

import { Card, CardGrid, LinkCard } from '@astrojs/starlight/components';

To wrap multiple [`<Card>`](/components/cards/) or [`<LinkCard>`](/components/link-cards/) components in a grid, use the`<CardGrid>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<CardGrid slot="preview">
	<Card title="Stars" icon="star">
		Sirius, Vega, Betelgeuse
	</Card>
	<Card title="Moons" icon="moon">
		Io, Europa, Ganymede
	</Card>
</CardGrid>

</Preview>

## Import

```tsx
import { CardGrid } from '@astrojs/starlight/components';
```

## Usage

### Group cards

Display multiple [`<Card>`](/components/cards/) components side-by-side when there‚Äôs enough space by grouping them using the `<CardGrid>` component.

<Preview>

```mdx {3,10}
import { Card, CardGrid } from '@astrojs/starlight/components';

<CardGrid>
	<Card title="Check this out" icon="open-book">
		Interesting content you want to highlight.
	</Card>
	<Card title="Other feature" icon="information">
		More information you want to share.
	</Card>
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc {1,9}
{% cardgrid %}
{% card title="Check this out" icon="open-book" %}
Interesting content you want to highlight.
{% /card %}

{% card title="Other feature" icon="information" %}
More information you want to share.
{% /card %}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview">
	<Card title="Check this out" icon="open-book">
		Interesting content you want to highlight.
	</Card>
	<Card title="Other feature" icon="information">
		More information you want to share.
	</Card>
</CardGrid>

</Preview>

### Group link cards

Display multiple [`<LinkCard>`](/components/link-cards/) components side-by-side when there‚Äôs enough space by grouping them using the `<CardGrid>` component.

<Preview>

```mdx {3,6}
import { LinkCard, CardGrid } from '@astrojs/starlight/components';

<CardGrid>
	<LinkCard title="Authoring Markdown" href="/guides/authoring-content/" />
	<LinkCard title="Components" href="/components/using-components/" />
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc {1,5}
{% cardgrid %}
{% linkcard title="Authoring Markdown" href="/guides/authoring-content/" /%}

{% linkcard title="Components" href="/components/using-components/" /%}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview">
	<LinkCard title="Authoring Markdown" href="/guides/authoring-content/" />
	<LinkCard title="Components" href="/components/using-components/" />
</CardGrid>

</Preview>

### Stagger cards

Shift the second column of the grid vertically to add visual interest by adding the [`stagger`](#stagger) attribute to the `<CardGrid>` component.

This attribute is useful on your home page to display your project‚Äôs key features.

<Preview>

```mdx "stagger"
import { Card, CardGrid } from '@astrojs/starlight/components';

<CardGrid stagger>
	<Card title="Check this out" icon="open-book">
		Interesting content you want to highlight.
	</Card>
	<Card title="Other feature" icon="information">
		More information you want to share.
	</Card>
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc "stagger=true"
{% cardgrid stagger=true %}
{% card title="Check this out" icon="open-book" %}
Interesting content you want to highlight.
{% /card %}

{% card title="Other feature" icon="information" %}
More information you want to share.
{% /card %}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview" stagger>
	<Card title="Check this out" icon="open-book">
		Interesting content you want to highlight.
	</Card>
	<Card title="Other feature" icon="information">
		More information you want to share.
	</Card>
</CardGrid>

</Preview>

## `<CardGrid>` Props

**Implementation:** [`CardGrid.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/CardGrid.astro)

The `<CardGrid>` component accepts the following props:

### `stagger`

**type:** `boolean`

Defines whether to stagger the cards in the grid or not.


 This is the content for the doc docs/src/content/docs/components/cards.mdx 

 ---
title: Cards
description: Learn how to use cards in Starlight to display content in a box.
sidebar:
  order: 2
---

import { Card } from '@astrojs/starlight/components';

To display content in a box matching Starlight‚Äôs styles, use the `<Card>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<Card slot="preview" title="Moons" icon="moon">
	Io, Europa, Ganymede
</Card>

</Preview>

## Import

```tsx
import { Card } from '@astrojs/starlight/components';
```

## Usage

Display a card using the `<Card>` component and provide a [`title`](#title) for the card.

<Preview>

```mdx
import { Card } from '@astrojs/starlight/components';

<Card title="Check this out">Interesting content you want to highlight.</Card>
```

<Fragment slot="markdoc">

```markdoc
{% card title="Check this out" %}
Interesting content you want to highlight.
{% /card %}
```

</Fragment>

<Card slot="preview" title="Check this out">
	Interesting content you want to highlight.
</Card>

</Preview>

### Add icons to cards

Include an icon in a card using the [`icon`](#icon) attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons).

<Preview>

```mdx 'icon="star"'
import { Card } from '@astrojs/starlight/components';

<Card title="Stars" icon="star">
	Sirius, Vega, Betelgeuse
</Card>
```

<Fragment slot="markdoc">

```markdoc 'icon="star"'
{% card title="Stars" icon="star" %}
Sirius, Vega, Betelgeuse
{% /card %}
```

</Fragment>

<Card slot="preview" title="Stars" icon="star">
	Sirius, Vega, Betelgeuse
</Card>

</Preview>

### Group cards

Display multiple cards side-by-side when there‚Äôs enough space by grouping them using the [`<CardGrid>`](/components/card-grids/) component.
See the [‚ÄúGroup cards‚Äù](/components/card-grids/#group-cards) guide for an example.

## `<Card>` Props

**Implementation:** [`Card.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Card.astro)

The `<Card>` component accepts the following props:

### `title`

**required**  
**type:** `string`

The title of the card to display.

### `icon`

**type:** `string`

A card can include an `icon` attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons).


 This is the content for the doc docs/src/content/docs/components/code.mdx 

 ---
title: Code
description: Learn how to display syntax highlighted code in Starlight without Markdown code blocks.
---

import { Code } from '@astrojs/starlight/components';

The `<Code>` component renders syntax highlighted code.
It is useful when using a [Markdown code block](/guides/authoring-content/#code-blocks) is not possible, for example, to render data coming from external sources like files, databases, or APIs.

import Preview from '~/components/component-preview.astro';

<Preview>

<Code
	slot="preview"
	code={`## Welcome

Hello from **space**!`}
lang="md"
title="example.md"
ins={3}
/>

</Preview>

## Import

```tsx
import { Code } from '@astrojs/starlight/components';
```

## Usage

Use the `<Code>` component to render syntax highlighted code, for example when displaying code fetched from external sources.

See the [Expressive Code ‚ÄúCode Component‚Äù docs](https://expressive-code.com/key-features/code-component/) for full details on how to use the `<Code>` component and the list of available props.

<Preview>

```mdx
import { Code } from '@astrojs/starlight/components';

export const exampleCode = `console.log('This could come from a file or CMS!');`;
export const fileName = 'example.js';
export const highlights = ['file', 'CMS'];

<Code code={exampleCode} lang="js" title={fileName} mark={highlights} />
```

<Fragment slot="markdoc">

```markdoc
{% code
   code="console.log('This could come from a file or CMS!');"
   lang="js"
   title="example.js"
   meta="'file' 'CMS'" /%}
```

</Fragment>

export const exampleCode = `console.log('This could come from a file or CMS!');`;
export const fileName = 'example.js';
export const highlights = ['file', 'CMS'];

<Code
	slot="preview"
	code={exampleCode}
	lang="js"
	title={fileName}
	mark={highlights}
/>

</Preview>

### Display imported code

In MDX files and Astro components, use [Vite‚Äôs `?raw` import suffix](https://vite.dev/guide/assets#importing-asset-as-string) to import any code file as a string.
You can then pass this imported string to the `<Code>` component to include it on your page.

<Preview>

```mdx "?raw"
# src/content/docs/example.mdx

import { Code } from '@astrojs/starlight/components';
import importedCode from '/tsconfig.json?raw';

<Code code={importedCode} lang="json" title="tsconfig.json" />
```

import importedCode from '../../../../../examples/basics/tsconfig.json?raw';

<Code slot="preview" code={importedCode} lang="json" title="tsconfig.json" />

</Preview>

## `<Code>` Props

**Implementation:** [`Code.astro`](https://github.com/expressive-code/expressive-code/blob/main/packages/astro-expressive-code/components/Code.astro)

The `<Code>` component accepts all the props documented in the [Expressive Code ‚ÄúCode Component‚Äù docs](https://expressive-code.com/key-features/code-component/#available-props).


 This is the content for the doc docs/src/content/docs/components/file-tree.mdx 

 ---
title: File Tree
description: Learn how to display the structure of a directory with file icons and collapsible sub-directories in Starlight.
---

import { FileTree } from '@astrojs/starlight/components';

To display the structure of a directory with file icons and collapsible sub-directories, use the `<FileTree>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<FileTree slot="preview">

- astro.config.mjs an **important** file
- package.json
- README.md
- src
  - components
    - **Header.astro**
  - ‚Ä¶
- pages/

</FileTree>

</Preview>

## Import

```tsx
import { FileTree } from '@astrojs/starlight/components';
```

## Usage

Display a file tree with file icons and collapsible sub-directories using the `<FileTree>` component.

Specify the structure of your files and directories with an [unordered Markdown list](https://www.markdownguide.org/basic-syntax/#unordered-lists) inside `<FileTree>`.
Create a sub-directory using a nested list or add a `/` to the end of a list item to render it as a directory without specific content.

<Preview>

```mdx
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/

</FileTree>
```

<Fragment slot="markdoc">

```markdoc
{% filetree %}
- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/

</FileTree>

</Preview>

### Highlight entries

Make a file or directory stand out by making its name bold, e.g. `**README.md**`.

<Preview>

```mdx {7}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - **Header.astro**
    - Title.astro

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {4}
{% filetree %}
- src
  - components
    - **Header.astro**
    - Title.astro
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - **Header.astro**
    - Title.astro

</FileTree>

</Preview>

### Add comments

Add a comment to a file or directory by adding more text after the name.
Inline Markdown formatting such as bold and italics is supported in comments.

<Preview>

```mdx {7}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - Header.astro an **important** file
    - Title.astro

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {4}
{% filetree %}
- src
  - components
    - Header.astro an **important** file
    - Title.astro
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - Header.astro an **important** file
    - Title.astro

</FileTree>

</Preview>

### Add placeholders

Add placeholder files and directories by using either `...` or `‚Ä¶` as the name.
This can be useful to indicate to a reader that a folder is expected to contain more items without specifying them all explicitly.

<Preview>

```mdx {8}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - Header.astro
    - ‚Ä¶

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {5}
{% filetree %}
- src
  - components
    - Header.astro
    - ‚Ä¶
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - Header.astro
    - ‚Ä¶

</FileTree>

</Preview>

## `<FileTree>` Props

**Implementation:** [`FileTree.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/FileTree.astro)

The `<FileTree>` component does not accept any props.


 This is the content for the doc docs/src/content/docs/components/icons.mdx 

 ---
title: Icons
description: Learn how to display icons in Starlight.
---

import { Icon } from '@astrojs/starlight/components';

To display icons from Starlight‚Äôs [built-in icon set](/reference/icons/#all-icons), use the `<Icon>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<Icon
	slot="preview"
	name="open-book"
	color="var(--sl-color-text-accent)"
	size="4rem"
/>

</Preview>

## Import

```tsx
import { Icon } from '@astrojs/starlight/components';
```

## Usage

Display an icon using the `<Icon>` component.
An icon requires a [`name`](#name) set to [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons) and can optionally include a [`label`](#label) to provide context for screen readers.

<Preview>

```mdx
import { Icon } from '@astrojs/starlight/components';

<Icon name="star" />
<Icon name="starlight" label="The Starlight logo" />
```

<Fragment slot="markdoc">

```markdoc
{% icon name="star" /%}
{% icon name="starlight" label="The Starlight logo" /%}
```

</Fragment>

<Fragment slot="preview">
	<Icon name="star" />
	<Icon name="starlight" label="The Starlight logo" />
</Fragment>

</Preview>

### Customize icons

The [`size`](#size) and [`color`](#color) attributes can be used to adjust the icon‚Äôs appearance using CSS units and color values.
The [`class`](#class) attribute can be used to add custom CSS classes to the icon.

<Preview>

```mdx
import { Icon } from '@astrojs/starlight/components';

<Icon name="star" color="goldenrod" size="2rem" />
<Icon name="rocket" color="var(--sl-color-text-accent)" />
```

<Fragment slot="markdoc">

```markdoc
{% icon name="star" color="goldenrod" size="2rem" /%}
{% icon name="rocket" color="var(--sl-color-text-accent)" /%}
```

</Fragment>

<Fragment slot="preview">
	<Icon name="star" color="goldenrod" size="2rem" />
	<Icon name="rocket" color="var(--sl-color-text-accent)" />
</Fragment>

</Preview>

## `<Icon>` Props

**Implementation:** [`Icon.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Icon.astro)

The `<Icon>` component accepts the following props:

### `name`

**required**  
**type:** `string`

The name of the icon to display set to [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons).

### `label`

**type:** `string`

An optional label to provide context for assistive technologies, such as screen readers.

When `label` is not set, the icon will be completely hidden from assistive technologies.
In this case, make sure the context is still understandable without the icon.
For example, a link containing only the icon **must** include the `label` attribute in order to be accessible, but if a link contains text and the icon is purely decorative, omitting the `label` may make sense.

### `size`

**type:** `string`

The size of the icon using CSS units.

### `color`

**type:** `string`

The color of the icon using a CSS color value.

### `class`

**type:** `string`

Custom CSS classes to add to the icon.


 This is the content for the doc docs/src/content/docs/components/link-buttons.mdx 

 ---
title: Link Buttons
description: Learn how to create link buttons in Starlight for visually distinct call-to-action links.
---

import { LinkButton } from '@astrojs/starlight/components';

To display visually distinct call-to-action links, use the `<LinkButton>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<LinkButton slot="preview" href="/getting-started/">
	Read the docs
</LinkButton>

</Preview>

## Import

```tsx
import { LinkButton } from '@astrojs/starlight/components';
```

## Usage

Use the `<LinkButton>` component to display a visually distinct call-to-action link.
A link button is useful for directing users to the most relevant or actionable content and is often used on landing pages.

A `<LinkButton>` requires an [`href`](#href) attribute.
Optionally, customize the appearance of the link button using the [`variant`](#variant) attribute, which can be set to `primary` (the default), `secondary`, or `minimal`.

<Preview>

```mdx
import { LinkButton } from '@astrojs/starlight/components';

<LinkButton href="/getting-started/">Get started</LinkButton>
<LinkButton href="/reference/configuration/" variant="secondary">
	Configuration Reference
</LinkButton>
```

<Fragment slot="markdoc">

```markdoc
{% linkbutton href="/getting-started/" %}Get started{% /linkbutton %}

{% linkbutton href="/reference/configuration/" variant="secondary" %}
Configuration Reference
{% /linkbutton %}
```

</Fragment>

<Fragment slot="preview">
	<LinkButton href="/getting-started/">Get started</LinkButton>
	<LinkButton href="/reference/configuration/" variant="secondary">
		Configuration Reference
	</LinkButton>
</Fragment>

</Preview>

### Add icons to link buttons

Include an icon in a link button using the [`icon`](#icon) attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons).

The [`iconPlacement`](#iconplacement) attribute can be used to place the icon before the text by setting it to `start` (defaults to `end`).

<Preview>

```mdx {6-7}
import { LinkButton } from '@astrojs/starlight/components';

<LinkButton
	href="https://docs.astro.build"
	variant="secondary"
	icon="external"
	iconPlacement="start"
>
	Related: Astro
</LinkButton>
```

<Fragment slot="markdoc">

```markdoc {4-5}
{% linkbutton
   href="https://docs.astro.build"
	 variant="secondary"
	 icon="external"
	 iconPlacement="start" %}
Related: Astro
{% /linkbutton %}
```

</Fragment>

<LinkButton
	slot="preview"
	href="https://docs.astro.build"
	variant="secondary"
	icon="external"
	iconPlacement="start"
>
	Related: Astro
</LinkButton>

</Preview>

## `<LinkButton>` Props

**Implementation:** [`LinkButton.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/LinkButton.astro)

The `<LinkButton>` component accepts the following props and also any [other `<a>` attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a):

### `href`

**required**  
**type:** `string`

The URL that the link button points to.

### `variant`

**type:** `'primary' | 'secondary' | 'minimal'`  
**default:** `'primary'`

The appearance of the link button.
Set to `primary` for a prominent call-to-action link using the theme‚Äôs accent color, `secondary` for a less prominent link, or `minimal` for a link with minimal styling.

### `icon`

**type:** `string`

A link button can include an `icon` attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons).

### `iconPlacement`

**type:** `'start' | 'end'`  
**default:** `'end'`

Determines the placement of the icon in relation to the link button text.


 This is the content for the doc docs/src/content/docs/components/link-cards.mdx 

 ---
title: Link Cards
description: Learn how to display links prominently as cards in Starlight.
sidebar:
  order: 3
---

import { LinkCard } from '@astrojs/starlight/components';

To display links to different pages prominently, use the `<LinkCard>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<LinkCard
	slot="preview"
	title="Customizing Starlight"
	description="Learn how to make your Starlight site your own with custom styles, fonts, and more."
	href="/guides/customization/"
/>

</Preview>

## Import

```tsx
import { LinkCard } from '@astrojs/starlight/components';
```

## Usage

Display a link prominently using the `<LinkCard>` component.
Each `<LinkCard>` requires a [`title`](#title) and an [`href`](#href) attribute.

<Preview>

```mdx
import { LinkCard } from '@astrojs/starlight/components';

<LinkCard title="Authoring Markdown" href="/guides/authoring-content/" />
```

<Fragment slot="markdoc">

```markdoc
{% linkcard title="Authoring Markdown" href="/guides/authoring-content/" /%}
```

</Fragment>

<LinkCard
	slot="preview"
	title="Authoring Markdown"
	href="/guides/authoring-content/"
/>

</Preview>

### Add a link description

Add a short description to a link card using the [`description`](#description) attribute.

<Preview>

```mdx {6}
import { LinkCard } from '@astrojs/starlight/components';

<LinkCard
	title="Internationalization"
	href="/guides/i18n/"
	description="Configure Starlight to support multiple languages."
/>
```

<Fragment slot="markdoc">

```markdoc {4}
{% linkcard
   title="Internationalization"
	 href="/guides/i18n/"
	 description="Configure Starlight to support multiple languages." /%}
```

</Fragment>

<LinkCard
	slot="preview"
	title="Internationalization"
	href="/guides/i18n/"
	description="Configure Starlight to support multiple languages."
/>

</Preview>

### Group link cards

Display multiple link cards side-by-side when there‚Äôs enough space by grouping them using the [`<CardGrid>`](/components/card-grids/) component.
See the [‚ÄúGroup link cards‚Äù](/components/card-grids/#group-link-cards) guide for an example.

## `<LinkCard>` Props

**Implementation:** [`LinkCard.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/LinkCard.astro)

The `<LinkCard>` component accepts the following props, as well as all other [`<a>` element attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a):

### `title`

**required**  
**type:** `string`

The title of the link card to display.

### `href`

**required**  
**type:** `string`

The URL to link to when the card is interacted with.

### `description`

**type:** `string`

An optional description to display below the title.


 This is the content for the doc docs/src/content/docs/components/steps.mdx 

 ---
title: Steps
description: Learn how to style numbered lists of tasks to create step-by-step guides in Starlight.
---

import { Tabs, TabItem, Steps } from '@astrojs/starlight/components';

To style a numbered list of tasks to create step-by-step guides, use the `<Steps>` component.

import Preview from '~/components/component-preview.astro';

<Preview>

<Steps slot="preview">

1. Create a new Starlight project:

   <Tabs syncKey="pkg">

   <TabItem label="npm">

   ```sh
   npm create astro@latest -- --template starlight
   ```

   </TabItem>

   <TabItem label="pnpm">

   ```sh
   pnpm create astro --template starlight
   ```

   </TabItem>

   <TabItem label="Yarn">

   ```sh
   yarn create astro --template starlight
   ```

   </TabItem>

   </Tabs>

2. Write your first documentation page.

</Steps>

</Preview>

## Import

```tsx
import { Steps } from '@astrojs/starlight/components';
```

## Usage

Use the `<Steps>` component to style numbered lists of tasks.
This is useful for more complex step-by-step guides where each step needs to be clearly highlighted.

Wrap `<Steps>` around a standard Markdown ordered list.
All the usual Markdown syntax is applicable inside `<Steps>`.

<Preview>

````mdx
import { Steps } from '@astrojs/starlight/components';

<Steps>

1. Import the component into your MDX file:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wrap `<Steps>` around your ordered list items.

</Steps>
````

<Fragment slot="markdoc">

````markdoc
{% steps %}

1. Import the component into your MDX file:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wrap `<Steps>` around your ordered list items.

{% /steps %}
````

</Fragment>

<Steps slot="preview">

1. Import the component into your MDX file:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wrap `<Steps>` around your ordered list items.

</Steps>

</Preview>

## `<Steps>` Props

**Implementation:** [`Steps.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Steps.astro)

The `<Steps>` component does not accept any props.


 This is the content for the doc docs/src/content/docs/components/tabs.mdx 

 ---
title: Tabs
description: Learn how to create tabbed interfaces in Starlight to group equivalent information.
---

import { Tabs, TabItem } from '@astrojs/starlight/components';

To create a tabbed interface use the `<Tabs>` and `<TabItem>` components.
Tabs are useful for grouping equivalent information where a user only needs to see one of several options.

import Preview from '~/components/component-preview.astro';

<Preview>

<Tabs slot="preview">
	<TabItem label="Stars">Sirius, Vega, Betelgeuse</TabItem>
	<TabItem label="Moons">Io, Europa, Ganymede</TabItem>
</Tabs>

</Preview>

## Import

```tsx
import { Tabs, TabItem } from '@astrojs/starlight/components';
```

## Usage

Display a tabbed interface using the `<Tabs>` and `<TabItem>` components.
Each `<TabItem>` must have a [`label`](#label) to display to users.

<Preview>

```mdx
import { Tabs, TabItem } from '@astrojs/starlight/components';

<Tabs>
	<TabItem label="Stars">Sirius, Vega, Betelgeuse</TabItem>
	<TabItem label="Moons">Io, Europa, Ganymede</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc
{% tabs %}
{% tabitem label="Stars" %}
Sirius, Vega, Betelgeuse
{% /tabitem %}

{% tabitem label="Moons" %}
Io, Europa, Ganymede
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Tabs slot="preview">
	<TabItem label="Stars">Sirius, Vega, Betelgeuse</TabItem>
	<TabItem label="Moons">Io, Europa, Ganymede</TabItem>
</Tabs>

</Preview>

### Sync tabs

Keep multiple tab groups synchronized by adding the [`syncKey`](#synckey) attribute.

All `<Tabs>` on a page with the same `syncKey` value will display the same active label.
This allows your reader to choose once (e.g. their operating system or package manager), and see their choice persisted across page navigations.

To synchronize related tabs, add an identical `syncKey` property to each `<Tabs>` component and ensure that they all use the same `<TabItem>` labels:

<Preview>

```mdx 'syncKey="constellations"'
import { Tabs, TabItem } from '@astrojs/starlight/components';

_Some stars:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">Bellatrix, Rigel, Betelgeuse</TabItem>
	<TabItem label="Gemini">Pollux, Castor A, Castor B</TabItem>
</Tabs>

_Some exoplanets:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">HD 34445 b, Gliese 179 b, Wasp-82 b</TabItem>
	<TabItem label="Gemini">Pollux b, HAT-P-24b, HD 50554 b</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc 'syncKey="constellations"'
_Some stars:_

{% tabs syncKey="constellations" %}
{% tabitem label="Orion" %}
Bellatrix, Rigel, Betelgeuse
{% /tabitem %}

{% tabitem label="Gemini" %}
Pollux, Castor A, Castor B
{% /tabitem %}
{% /tabs %}

_Some exoplanets:_

{% tabs syncKey="constellations" %}
{% tabitem label="Orion" %}
HD 34445 b, Gliese 179 b, Wasp-82 b
{% /tabitem %}

{% tabitem label="Gemini" %}
Pollux b, HAT-P-24b, HD 50554 b
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Fragment slot="preview">

_Some stars:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">Bellatrix, Rigel, Betelgeuse</TabItem>
	<TabItem label="Gemini">Pollux, Castor A, Castor B</TabItem>
</Tabs>

_Some exoplanets:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">HD 34445 b, Gliese 179 b, Wasp-82 b</TabItem>
	<TabItem label="Gemini">Pollux b, HAT-P-24b, HD 50554 b</TabItem>
</Tabs>

</Fragment>

</Preview>

### Add icons to tabs

Include an icon in a tab item using the [`icon`](#icon) attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons) to display an icon next to the label.

<Preview>

```mdx /icon="\w+"/
import { Tabs, TabItem } from '@astrojs/starlight/components';

<Tabs>
	<TabItem label="Stars" icon="star">
		Sirius, Vega, Betelgeuse
	</TabItem>
	<TabItem label="Moons" icon="moon">
		Io, Europa, Ganymede
	</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc /icon="\w+"/
{% tabs %}
{% tabitem label="Stars" icon="star" %}
Sirius, Vega, Betelgeuse
{% /tabitem %}

{% tabitem label="Moons" icon="moon" %}
Io, Europa, Ganymede
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Tabs slot="preview">
	<TabItem label="Stars" icon="star">
		Sirius, Vega, Betelgeuse
	</TabItem>
	<TabItem label="Moons" icon="moon">
		Io, Europa, Ganymede
	</TabItem>
</Tabs>

</Preview>

## `<Tabs>` Props

**Implementation:** [`Tabs.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Tabs.astro)

The `<Tabs>` component groups multiple `<TabItem>` components together and accepts the following props:

### `syncKey`

**type:** `string`

A key used to keep multiple tab groups synchronized across multiple pages.

## `<TabItem>` Props

**Implementation:** [`TabItem.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/TabItem.astro)

A set of tabs is composed of tab items, each with the following props:

### `label`

**required**  
**type:** `string`

A tab item must include a `label` attribute set to the text that will be displayed in the tab.

### `icon`

**type:** `string`

Each tab item can include an `icon` attribute set to the name of [one of Starlight‚Äôs built-in icons](/reference/icons/#all-icons) to display an icon next to the label.


 This is the content for the doc docs/src/content/docs/components/using-components.mdx 

 ---
title: Using components
description: Using components in MDX and Markdoc with Starlight.
sidebar:
  order: 1
---

Components let you easily reuse a piece of UI or styling consistently.
Examples might include a link card or a YouTube embed.
Starlight supports the use of components in [MDX](https://mdxjs.com/) and [Markdoc](https://markdoc.dev/) files and provides some common components for you to use.

[Learn more about building components in the Astro Docs](https://docs.astro.build/en/basics/astro-components/).

## Using a component in MDX

You can use a component by importing it into your MDX file and then rendering it as a JSX tag.
These look like HTML tags but start with an uppercase letter matching the name in your `import` statement:

```mdx
---
# src/content/docs/example.mdx
title: Welcome to my docs
---

import { Icon } from '@astrojs/starlight/components';
import CustomCard from '../../components/CustomCard.astro';

<Icon name="open-book" />

<CustomCard>Components can also contain **nested content**.</CustomCard>
```

Because Starlight is powered by Astro, you can add support for components built with any [supported UI framework (React, Preact, Svelte, Vue, Solid, and Alpine)](https://docs.astro.build/en/guides/framework-components/) in your MDX files.
Learn more about [using components in MDX](https://docs.astro.build/en/guides/integrations-guide/mdx/#using-components-in-mdx) in the Astro docs.

## Using a component in Markdoc

Add support for authoring content in Markdoc by following our [Markdoc set-up guide](/guides/authoring-content/#markdoc).

Using the Starlight Markdoc preset, you can use Starlight‚Äôs built-in components with Markdoc‚Äôs `{% %}` tag syntax.
Unlike MDX, components in Markdoc do not need to be imported.
The following example renders Starlight‚Äôs [card component](/components/cards/) in a Markdoc file:

```markdoc
---
# src/content/docs/example.mdoc
title: Welcome to my docs
---

{% card title="Stars" icon="star" %}
Sirius, Vega, Betelgeuse
{% /card %}
```

See the [Astro Markdoc integration documentation](https://docs.astro.build/en/guides/integrations-guide/markdoc/#render-components) for more information on how to use components in Markdoc files.

## Built-in components

Starlight provides built-in components for common documentation use cases.
These components are available from the `@astrojs/starlight/components` package in MDX files and from the [Starlight Markdoc preset](/guides/authoring-content/#markdoc) in Markdoc files.

See the sidebar for a list of available components and how to use them.

## Compatibility with Starlight‚Äôs styles

Starlight applies default styling to your Markdown content, for example, adding margin between elements.
If these styles conflict with your component‚Äôs appearance, set the `not-content` class on your component to disable them.

```astro 'class="not-content"'
---
// src/components/Example.astro
---

<div class="not-content">
	<p>Not impacted by Starlight‚Äôs default content styling.</p>
</div>
```

## Component props

Use the [`ComponentProps`](https://docs.astro.build/en/guides/typescript/#componentprops-type) type from `astro/types` to reference the `Props` accepted by a component even if they are not exported by the component itself.
This can be helpful when wrapping or extending an existing component.

The following example uses `ComponentProps` to get the type of the props accepted by Starlight‚Äôs built-in `Icon` component:

```astro
---
// src/components/Example.astro
import type { ComponentProps } from 'astro/types';
import { Icon } from '@astrojs/starlight/icon';

type IconProps = ComponentProps<typeof Icon>;
---
```


 This is the content for the doc docs/src/content/docs/da/404.md 

 ---
title: Ikke Fundet
template: splash
editUrl: false
hero:
  title: '404'
  tagline: <strong>Houston, vi har et problem.</strong> Vi kunne ikke finde den side.<br>Check URL'en eller pr√∏v at bruge s√∏gefeltet.
  actions:
    - text: G√• til hjem
      icon: right-arrow
      link: /da/
      variant: primary
---


 This is the content for the doc docs/src/content/docs/da/guides/project-structure.mdx 

 ---
title: Projekt Struktur
description: L√¶r hvordan man organiserer filerne i dit Starlight projekt.
---

Denne guide viser dig hvordan et Starlight projekt skal opbygges og hvordan de forskellige filer i projektet virker.

Starlight projekter f√∏lger for det meste den samme fil- og mappestruktur som andre Astro projekter. Se [Astros projektstrukturs dokumentation](https://docs.astro.build/en/core-concepts/project-structure/) for flere detaljer.

## Filer og mapper

- `astro.config.mjs` ‚Äî Astro konfigurationsfilen; inkluderer Starlight integrationen og konfigurationen.
- `src/content/config.ts` ‚Äî Indholdskollektions-konfigurationsfilen; tilf√∏jer Starlights frontmatter-skemaer til dit projekt.
- `src/content/docs/` ‚Äî Indholdsfiler. Starlight laver alle `.md`, `.mdx` eller `.mdoc` filer i denne mappe til en side p√• din hjemmeside.
- `src/content/i18n/` (valgfri) ‚Äî Overs√¶ttelses data til at st√∏tte [internationaliseringen](/da/guides/i18n/).
- `src/` ‚Äî Andre koder og filer (komponenter, styling, billeder mm.) til dit projekt.
- `public/` ‚Äî Statiske filer (fonter, favicon, PDF'er mm.) som ikke vil blive √¶ndret af Astro.

## Eksempel projektindhold

En Starlight projektstruktur kunne se s√•dan ud:

import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- public/
  - favicon.svg
- src/
  - assets/
    - logo.svg
    - screenshot.jpg
  - components/
    - CustomButton.astro
    - InteractiveWidget.jsx
  - content/
    - docs/
      - guides/
        - 01-getting-started.md
        - 02-advanced.md
      - index.mdx
    - config.ts
  - env.d.ts
- astro.config.mjs
- package.json
- tsconfig.json

</FileTree>


 This is the content for the doc docs/src/content/docs/da/index.mdx 

 ---
title: Starlight üåü Byg dokumentationssider med Astro
description: Starlight hj√¶lper dig med at bygge smukke og hurtige dokumentationssider med Astro.
template: splash
editUrl: false
lastUpdated: false
hero:
  title: F√• din dokumentation til at skinne med Starlight
  tagline: Alt du har brug for, for at bygge en skindende dokumentationsside. Hurtig, tilg√¶ngelig og nem at bruge.
  image:
    file: ~/assets/hero-star.webp
  actions:
    - text: Kom igang
      icon: right-arrow
      link: /da/getting-started/
    - text: Se p√• GitHub
      icon: external
      variant: minimal
      link: https://github.com/withastro/starlight
---

import { CardGrid, Card } from '@astrojs/starlight/components';
import AboutAstro from '~/components/about-astro.astro';

<CardGrid stagger>
	<Card title="Documentation, der begejstrer" icon="open-book">
		Inkluderer: Sidenavigation, s√∏g, internationalisering, SEO, nem at l√¶se
		typografi, kodefremh√¶vning, m√∏rk tilstand og mere.
	</Card>
	<Card title="Drevet af Astro" icon="rocket">
		Udnyt den fulde kraft og udevne af Astro. Udvid Starlight med dine yndlings
		Astro integrationer og biblioteker
	</Card>
	<Card title="Markdown, Markdoc og MDX" icon="document">
		Anvend dit yndlings markup sprog. Starlight giver dig indbygget
		Frontmatter-validering med TypeScript type-sikkerhed.
	</Card>
	<Card title="Anvend dine egne UI-komponenter" icon="puzzle">
		Starlight ships as a framework-agnostic, complete docs solution. Extend with
		React, Vue, Svelte, Solid, and more. Starlight bliver leveret som en fuldent
		dokumentations-l√∏sning, der er ligeglad, med hvilket framework du bruger.
		Udvid med React, Vue, Svelte, Solid, og mere.
	</Card>
</CardGrid>

<AboutAstro title="Bragt til dig af">
Astro er et all-in-one web framework, der er bygget til udevne.
Hiv dit indhold ned fra hvor som helst og inds√¶t det hvor som helst, alt sammen drevet af dine yndlings UI-komponenter og biblioteker.

[L√¶r mere om Astro](https://astro.build/)

</AboutAstro>


 This is the content for the doc docs/src/content/docs/de/404.md 

 ---
title: Nicht gefunden
template: splash
editUrl: false
hero:
  title: '404'
  tagline: <strong>Houston, wir haben ein Problem.</strong> Wir konnten diese Seite nicht finden.<br>Pr√ºfe die URL oder verwende die Suchleiste.
  actions:
    - text: Zur Startseite
      icon: right-arrow
      link: /de/
      variant: primary
---


 This is the content for the doc docs/src/content/docs/de/components/asides.mdx 

 ---
title: Nebenbemerkungen
description: Lerne, wie du in Starlight zus√§tzliche Informationen neben dem Hauptinhalt einer Seite anzeigen kannst.
---

import { Aside } from '@astrojs/starlight/components';

Um sekund√§re Informationen neben dem Hauptinhalt einer Seite anzuzeigen, verwende die Komponente `<Aside>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<Aside slot="preview">
    F√ºge nicht wesentliche, erg√§nzende Informationen in ein `<Aside>`.
</Aside>

</Preview>

## Import

```tsx
import { Aside } from '@astrojs/starlight/components';
```

## Verwendung

Zeige eine Nebenbemerkung (auch bekannt als ‚ÄûHinweise‚Äú, ‚ÄûErmahnungen‚Äú oder ‚ÄûAufrufe‚Äú) mit Hilfe der Komponente `<Aside>`.

Ein `<Aside>` kann ein optionales [`type`](#type) Attribute haben, welches die Farbe, das Symbol und den Standardtitel der Nebenbemerkung steuert.

<Preview>

````mdx
import { Aside } from '@astrojs/starlight/components';

<Aside>Einige Inhalte am Rande.</Aside>

<Aside type="caution">Einige warnende Inhalte.</Aside>

<Aside type="tip">

Auch andere Inhalte werden durch Nebenbemerkungen unterst√ºtzt.

```js
// Ein Codeschnipsel zum Beispiel.
```

</Aside>

<Aside type="danger">Gib dein Passwort nie an Dritte weiter!</Aside>
````

<Fragment slot="markdoc">

````markdoc
{% aside %}
Einige Inhalte am Rande.
{% /aside %}

{% aside type="caution" %}
Einige warnende Inhalte.
{% /aside %}

{% aside type="tip" %}
Auch andere Inhalte werden durch Nebenbemerkungen unterst√ºtzt.

```js
// Ein Codeschnipsel zum Beispiel.
```
{% /aside %}

{% aside type="danger" %}
Gib dein Passwort nie an Dritte weiter!
{% /aside %}
````

</Fragment>

<Fragment slot="preview">

    <Aside>Einige Inhalte am Rande.</Aside>

    <Aside type="caution">Einige warnende Inhalte.</Aside>

    <Aside type="tip">

    Auch andere Inhalte werden durch Nebenbemerkungen unterst√ºtzt.

    ```js
    // Ein Codeschnipsel zum Beispiel.
    ```

    </Aside>

    <Aside type="danger">Gib dein Passwort nie an Dritte weiter!</Aside>

</Fragment>

</Preview>

Starlight bietet auch eine benutzerdefinierte Syntax f√ºr die Darstellung von Nebenbemerkungen in Markdown und MDX als Alternative zur `<Aside>` Komponente.
Siehe den Leitfaden [‚ÄûInhalte in Markdown verfassen‚Äú](/de/guides/authoring-content/#nebenbemerkungen) f√ºr Details zu dieser Syntax.

### Benutzerdefinierte Titel verwenden

√úberschreibe die voreingestellten √úberschriften der Nebenbemerkungen mit dem Attribut [`title`](#title).

<Preview>

```mdx 'title="Aufgepasst!"'
import { Aside } from '@astrojs/starlight/components';

<Aside type="caution" title="Aufgepasst!">
	Ein Warnhinweis *mit* einem benutzerdefinierten Titel.
</Aside>
```

<Fragment slot="markdoc">

```markdoc 'title="Aufgepasst!"'
{% aside type="caution" title="Aufgepasst!" %}
Ein Warnhinweis *mit* einem benutzerdefinierten Titel.
{% /aside %}
```

</Fragment>

<Aside slot="preview" type="caution" title="Aufgepasst!">
	Ein Warnhinweis *mit* einem benutzerdefinierten Titel.
</Aside>

</Preview>

## `<Aside>`-Eigenschaften

**Implementation:** [`Aside.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Aside.astro)

Die Komponente `<Aside>` akzeptiert die folgenden Eigenschaften:

### `type`

**Typ:** `'note' | 'tip' | 'caution' | 'danger'`  
**Standard:** `'note'`

Die Art der Nebenbemerkung, die angezeigt werden soll:

- `note` Hinweise (die Standardeinstellung) sind blau und zeigen ein Informationssymbol an.
- `tip` Hinweise sind violett und zeigen ein Raketensymbol an.
- `caution` Hinweise sind gelb und zeigen ein dreieckiges Warnsymbol an.
- `danger` Hinweise sind rot und zeigen ein achteckiges Warnsymbol an.

### `title`

**Typ:** `string`

Die √úberschrift der anzuzeigenden Nebenbemerkung.
Wenn `title` nicht gesetzt ist, wird der Standardtitel f√ºr den aktuellen `type` der Nebenbemerkung verwendet.


 This is the content for the doc docs/src/content/docs/de/components/badges.mdx 

 ---
title: Abzeichen
description: Lerne, wie du in Starlight Abzeichen verwenden kannst, um zus√§tzliche Informationen anzuzeigen.
---

import { Badge } from '@astrojs/starlight/components';

Um wenige Informationen, wie z.B. einen Status oder eine Kategorie, anzuzeigen, verwende die Komponente `<Badge>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<Badge slot="preview" text="Neu" />

</Preview>

## Import

```tsx
import { Badge } from '@astrojs/starlight/components';
```

## Verwendung

Zeige ein Abzeichen mit der Komponente `<Badge>` an und √ºbergib den Inhalt, den du anzeigen m√∂chtest, an das Attribut [`text`](#text) der Komponente `<Badge>`.

Standardm√§√üig wird f√ºr das Abzeichen die Akzentfarbe des Themes deiner Website verwendet.
Um eine eingebaute Abzeichen-Farbe zu verwenden, setze das Attribut [`variant`](#variant) auf einen der unterst√ºtzten Werte.

<Preview>

```mdx
import { Badge } from '@astrojs/starlight/components';

<Badge text="Hinweis" variant="note" />
<Badge text="Erfolg" variant="success" />
<Badge text="Tipp" variant="tip" />
<Badge text="Warnung" variant="caution" />
<Badge text="Gefahr" variant="danger" />
```

<Fragment slot="markdoc">

```markdoc
{% badge text="Hinweis" variant="note" /%}
{% badge text="Erfolg" variant="success" /%}
{% badge text="Tipp" variant="tip" /%}
{% badge text="Warnung" variant="caution" /%}
{% badge text="Gefahr" variant="danger" /%}
```

</Fragment>

<Fragment slot="preview">
	<Badge text="Hinweis" variant="note" />
	<Badge text="Erfolg" variant="success" />
	<Badge text="Tipp" variant="tip" />
	<Badge text="Warnung" variant="caution" />
	<Badge text="Gefahr" variant="danger" />
</Fragment>

</Preview>

### Verschiedene Gr√∂√üen verwenden

Verwende das Attribut [`size`](#size), um die Gr√∂√üe des Abzeichentextes zu steuern.

<Preview>

```mdx /size="\w+"/
import { Badge } from '@astrojs/starlight/components';

<Badge text="Neu" size="small" />
<Badge text="Neu und verbessert" size="medium" />
<Badge text="Neu, verbessert und gr√∂√üer" size="large" />
```

<Fragment slot="markdoc">

```markdoc /size="\w+"/
{% badge text="Neu" size="small" /%}
{% badge text="Neu und verbessert" size="medium" /%}
{% badge text="Neu, verbessert und gr√∂√üer" size="large" /%}
```

</Fragment>

<Fragment slot="preview">
	<Badge text="Neu" size="small" />
	<Badge text="Neu und verbessert" size="medium" />
	<Badge text="Neu, verbessert und gr√∂√üer" size="large" />
</Fragment>

</Preview>

### Abzeichen anpassen

Passe Abzeichen an, indem du andere `<span>`-Attribute wie `class` oder `style` mit benutzerdefiniertem CSS verwendest.

<Preview>

```mdx "style={{ fontStyle: 'italic' }}"
import { Badge } from '@astrojs/starlight/components';

<Badge text="Individuell" variant="success" style={{ fontStyle: 'italic' }} />
```

<Fragment slot="markdoc">

```markdoc 'style="font-style: italic;"'
{% badge text="Individuell" variant="success" style="font-style: italic;" /%}
```

</Fragment>

<Badge
	slot="preview"
	text="Individuell"
	variant="success"
	style={{ fontStyle: 'italic' }}
/>

</Preview>

## `<Badge>`-Eigenschaften

**Implementation:** [`Badge.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Badge.astro)

Die `<Badge>`-Komponente akzeptiert die folgenden Eigenschaften und auch alle [anderen `<span>`-Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes):

### `text`

**Erforderlich**  
**Typ:** `string`

Der Textinhalt, der in dem Abzeichen angezeigt werden soll.

### `variant`

**Typ:** `'note' | 'danger' | 'success' | 'caution' | 'tip' | 'default'`  
**Standard:** `'default'`

Die zu verwendende Farbvariante des Abzeichens: `note` (blau), `tip` (lila), `danger` (rot), `caution` (orange), `success` (gr√ºn) oder `default` (Akzentfarbe des Themes).

### `size`

**Typ:** `'small' | 'medium' | 'large'`

Bestimmt die Gr√∂√üe des anzuzeigenden Abzeichens.


 This is the content for the doc docs/src/content/docs/de/components/card-grids.mdx 

 ---
title: Kartenraster
description: Erfahre, wie du in Starlight mehrere Karten in ein Raster packen kannst.
sidebar:
  order: 4
---

import { Card, CardGrid, LinkCard } from '@astrojs/starlight/components';

Um mehrere [`<Card>`](/de/components/cards/) oder [`<LinkCard>`](/de/components/link-cards/) Komponenten in einem Raster zu verpacken, verwende die Komponente `<CardGrid>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<CardGrid slot="preview">
	<Card title="Sterne" icon="star">
		Sirius, Wega, Betelgeuse
	</Card>
	<Card title="Monde" icon="moon">
		Io, Europa, Ganymed
	</Card>
</CardGrid>

</Preview>

## Import

```tsx
import { CardGrid } from '@astrojs/starlight/components';
```

## Verwendung

### Karten gruppieren

Zeige mehrere [`<Card>`](/de/components/cards/) Komponenten nebeneinander an, wenn gen√ºgend Platz vorhanden ist, indem du sie mit der `<CardGrid>` Komponente gruppierst.

<Preview>

```mdx {3,10}
import { Card, CardGrid } from '@astrojs/starlight/components';

<CardGrid>
	<Card title="Schau dir das an" icon="open-book">
		Interessante Inhalte, die du hervorheben m√∂chtest.
	</Card>
	<Card title="Anderer Inhalt" icon="information">
		Weitere Informationen, die du weitergeben m√∂chtest.
	</Card>
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc {1,9}
{% cardgrid %}
{% card title="Schau dir das an" icon="open-book" %}
Interessante Inhalte, die du hervorheben m√∂chtest.
{% /card %}

{% card title="Anderer Inhalt" icon="information" %}
Weitere Informationen, die du weitergeben m√∂chtest.
{% /card %}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview">
	<Card title="Schau dir das an" icon="open-book">
		Interessante Inhalte, die du hervorheben m√∂chtest.
	</Card>
	<Card title="Anderer Inhalt" icon="information">
		Weitere Informationen, die du weitergeben m√∂chtest.
	</Card>
</CardGrid>

</Preview>

### Link-Karten gruppieren

Zeige mehrere [`<LinkCard>`](/de/components/link-cards/) Komponenten nebeneinander an, wenn gen√ºgend Platz vorhanden ist, indem du sie mit der `<CardGrid>` Komponente gruppierst.

<Preview>

```mdx {3,6}
import { LinkCard, CardGrid } from '@astrojs/starlight/components';

<CardGrid>
	<LinkCard title="Markdown verfassen" href="/de/guides/authoring-content/" />
	<LinkCard title="Komponenten" href="/de/components/using-components/" />
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc {1,5}
{% cardgrid %}
{% linkcard title="Markdown verfassen" href="/de/guides/authoring-content/" /%}

{% linkcard title="Komponenten" href="/de/components/using-components/" /%}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview">
	<LinkCard title="Markdown verfassen" href="/de/guides/authoring-content/" />
	<LinkCard title="Komponenten" href="/de/components/using-components/" />
</CardGrid>

</Preview>

### Karten staffeln

Verschiebe die zweite Spalte des Rasters vertikal, um es optisch interessanter zu gestalten, indem du das Attribut [`stagger`](#stagger) zur Komponente `<CardGrid>` hinzuf√ºgst.

Dieses Attribut ist auf deiner Homepage n√ºtzlich, um die wichtigsten Merkmale deines Projekts anzuzeigen.

<Preview>

```mdx "stagger"
import { Card, CardGrid } from '@astrojs/starlight/components';

<CardGrid stagger>
	<Card title="Schau dir das an" icon="open-book">
		Interessante Inhalte, die du hervorheben m√∂chtest.
	</Card>
	<Card title="Anderer Inhalt" icon="information">
		Weitere Informationen, die du weitergeben m√∂chtest.
	</Card>
</CardGrid>
```

<Fragment slot="markdoc">

```markdoc "stagger=true"
{% cardgrid stagger=true %}
{% card title="Schau dir das an" icon="open-book" %}
Interessante Inhalte, die du hervorheben m√∂chtest.
{% /card %}

{% card title="Anderer Inhalt" icon="information" %}
Weitere Informationen, die du weitergeben m√∂chtest.
{% /card %}
{% /cardgrid %}
```

</Fragment>

<CardGrid slot="preview" stagger>
	<Card title="Schau dir das an" icon="open-book">
		Interessante Inhalte, die du hervorheben m√∂chtest.
	</Card>
	<Card title="Anderer Inhalt" icon="information">
		Weitere Informationen, die du weitergeben m√∂chtest.
	</Card>
</CardGrid>

</Preview>

## `<CardGrid>`-Eigenschaften

**Implementation:** [`CardGrid.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/CardGrid.astro)

Die Komponente `<CardGrid>` akzeptiert die folgenden Eigenschaften:

### `stagger`

**Typ:** `boolean`

Legt fest, ob die Karten im Raster gestaffelt werden sollen oder nicht.


 This is the content for the doc docs/src/content/docs/de/components/cards.mdx 

 ---
title: Karten
description: Lerne, wie du in Starlight Karten verwenden kannst, um Inhalte in einer Box anzuzeigen.
sidebar:
  order: 2
---

import { Card } from '@astrojs/starlight/components';

Um Inhalte in einer Box anzuzeigen, die den Stilen von Starlight entspricht, verwende die Komponente `<Card>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<Card slot="preview" title="Monde" icon="moon">
	Io, Europa, Ganymed
</Card>

</Preview>

## Import

```tsx
import { Card } from '@astrojs/starlight/components';
```

## Verwendung

Zeige eine Karte an, indem du die Komponente `<Card>` verwendest und einen [`title`](#title) f√ºr die Karte angibst.

<Preview>

```mdx
import { Card } from '@astrojs/starlight/components';

<Card title="Schau dir das an">
	Interessante Inhalte, die du hervorheben m√∂chtest.
</Card>
```

<Fragment slot="markdoc">

```markdoc
{% card title="Schau dir das an" %}
Interessante Inhalte, die du hervorheben m√∂chtest.
{% /card %}
```

</Fragment>

<Card slot="preview" title="Schau dir das an">
	Interessante Inhalte, die du hervorheben m√∂chtest.
</Card>

</Preview>

### Hinzuf√ºgen von Symbolen zu Karten

F√ºge ein Symbol in eine Karte ein, indem du das Attribut [`icon`](#icon) auf den Namen [eines von Starlights eingebauten Symbolen](/de/reference/icons/#alle-symbole) setzt.

<Preview>

```mdx 'icon="star"'
import { Card } from '@astrojs/starlight/components';

<Card title="Sterne" icon="star">
	Sirius, Wega, Betelgeuse
</Card>
```

<Fragment slot="markdoc">

```markdoc 'icon="star"'
{% card title="Sterne" icon="star" %}
Sirius, Wega, Betelgeuse
{% /card %}
```

</Fragment>

<Card slot="preview" title="Sterne" icon="star">
	Sirius, Wega, Betelgeuse
</Card>

</Preview>

### Karten gruppieren

Zeige mehrere Karten nebeneinander an, wenn gen√ºgend Platz vorhanden ist, indem du sie mit der Komponente [`<CardGrid>`](/de/components/card-grids/) gruppierst.
Siehe die Anleitung [‚ÄûKarten gruppieren‚Äú](/de/components/card-grids/#karten-gruppieren) f√ºr ein Beispiel.

## `<Card>`-Eigenschaften

**Implementation:** [`Card.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Card.astro)

Die Komponente `<Card>` akzeptiert die folgenden Eigenschaften:

### `title`

**Erforderlich**  
**Typ:** `string`

Der Titel der anzuzeigenden Karte.

### `icon`

**Typ:** `string`

Eine Karte kann ein `icon`-Attribut enthalten, das auf den Namen [eines von Starlights eingebauten Icons](/de/reference/icons/#alle-symbole) gesetzt ist.


 This is the content for the doc docs/src/content/docs/de/components/code.mdx 

 ---
title: Code
description: Erfahre, wie du syntaxmarkierten Code in Starlight ohne Markdown-Codebl√∂cke anzeigen kannst.
---

import { Code } from '@astrojs/starlight/components';

Die Komponente `<Code>` gibt syntaktisch hervorgehobenen Code wieder.
Sie ist n√ºtzlich, wenn die Verwendung eines [Markdown-Codeblocks](/de/guides/authoring-content/#codebl√∂cke) nicht m√∂glich ist, zum Beispiel, um Daten aus externen Quellen wie Dateien, Datenbanken oder APIs darzustellen.

import Preview from '~/components/component-preview.astro';

<Preview>

<Code
	slot="preview"
	code={`## Willkommen

Hallo aus dem **Weltraum**!`}
lang="md"
title="example.md"
ins={3}
/>

</Preview>

## Import

```tsx
import { Code } from '@astrojs/starlight/components';
```

## Verwendung

Verwende die Komponente `<Code>`, um Code mit hervorgehobener Syntax darzustellen, z. B. bei der Anzeige von Code aus externen Quellen.

Siehe die [Ausdrucksstarker Code ‚ÄûCode Komponente‚Äú Dokumentation](https://expressive-code.com/key-features/code-component/) f√ºr alle Details √ºber die Verwendung der `<Code>` Komponente und die Liste der verf√ºgbaren Eigenschaften.

<Preview>

```mdx
import { Code } from '@astrojs/starlight/components';

export const exampleCode = `console.log('Dies k√∂nnte aus einer Datei oder einem CMS stammen!');`;
export const fileName = 'example.js';
export const highlights = ['Datei', 'CMS'];

<Code code={exampleCode} lang="js" title={fileName} mark={highlights} />
```

<Fragment slot="markdoc">

```markdoc
{% code
   code="console.log('Dies k√∂nnte aus einer Datei oder einem CMS stammen!');"
   lang="js"
   title="example.js"
   meta="'Datei' 'CMS'" /%}
```

</Fragment>

export const exampleCode = `console.log('Dies k√∂nnte aus einer Datei oder einem CMS stammen!');`;
export const fileName = 'example.js';
export const highlights = ['Datei', 'CMS'];

<Code
	slot="preview"
	code={exampleCode}
	lang="js"
	title={fileName}
	mark={highlights}
/>

</Preview>

### Importierten Code anzeigen

Verwende in MDX-Dateien und Astro-Komponenten [Vites Importsuffix `?raw`](https://de.vite.dev/guide/assets#importieren-von-assets-als-zeichenfolge), um jede Codedatei als Zeichenfolge zu importieren.
Du kannst diese importierte Zeichenfolge dann an die Komponente `<Code>` √ºbergeben, um sie auf deiner Seite einzubinden.

<Preview>

```mdx "?raw"
# src/content/docs/example.mdx

import { Code } from '@astrojs/starlight/components';
import importedCode from '/tsconfig.json?raw';

<Code code={importedCode} lang="json" title="tsconfig.json" />
```

import importedCode from '../../../../../../examples/basics/tsconfig.json?raw';

<Code slot="preview" code={importedCode} lang="json" title="tsconfig.json" />

</Preview>

## `<Code>`-Eigenschaften

**Implementation:** [`Code.astro`](https://github.com/expressive-code/expressive-code/blob/main/packages/astro-expressive-code/components/Code.astro)

Die `<Code>`-Komponente akzeptiert alle in der [Ausdrucksstarker Code Dokumentation ‚ÄûCode Komponente‚Äú](https://expressive-code.com/key-features/code-component/#available-props) dokumentierten Eigenschaften.


 This is the content for the doc docs/src/content/docs/de/components/file-tree.mdx 

 ---
title: Verzeichnisbaum
description: Lerne, wie du die Struktur eines Verzeichnisses mit Dateisymbolen und einklappbaren Unterverzeichnissen in Starlight anzeigen kannst.
---

import { FileTree } from '@astrojs/starlight/components';

Um die Struktur eines Verzeichnisses mit Dateisymbolen und einklappbaren Unterverzeichnissen anzuzeigen, verwende die Komponente `<FileTree>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<FileTree slot="preview">

- astro.config.mjs eine **wichtige** Datei
- package.json
- README.md
- src
  - components
    - **Header.astro**
  - ‚Ä¶
- pages/

</FileTree>

</Preview>

## Import

```tsx
import { FileTree } from '@astrojs/starlight/components';
```

## Verwendung

Zeige einen Dateibaum mit Dateisymbolen und zusammenklappbaren Unterverzeichnissen unter Verwendung der Komponente `<FileTree>` an.

Gib die Struktur deiner Dateien und Verzeichnisse mit einer [ungeordneten Markdown-Liste](https://www.markdownguide.org/basic-syntax/#unordered-lists) innerhalb von `<FileTree>` an.
Erstelle ein Unterverzeichnis mit einer verschachtelten Liste oder f√ºge ein `/` am Ende eines Listenelements hinzu, um es als Verzeichnis ohne spezifischen Inhalt darzustellen.

<Preview>

```mdx
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/

</FileTree>
```

<Fragment slot="markdoc">

```markdoc
{% filetree %}
- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- astro.config.mjs
- package.json
- src
  - components
    - Header.astro
    - Title.astro
  - pages/

</FileTree>

</Preview>

### Eintr√§ge hervorheben

Hebe eine Datei oder ein Verzeichnis hervor, indem du seinen Namen fett druckst, z. B. `**README.md**`.

<Preview>

```mdx {7}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - **Header.astro**
    - Title.astro

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {4}
{% filetree %}
- src
  - components
    - **Header.astro**
    - Title.astro
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - **Header.astro**
    - Title.astro

</FileTree>

</Preview>

### Kommentare hinzuf√ºgen

F√ºge einen Kommentar zu einer Datei oder einem Verzeichnis hinzu, indem du nach dem Namen weiteren Text hinzuf√ºgst.
Inline-Markdown-Formatierung wie Fett- und Kursivdruck wird in Kommentaren unterst√ºtzt.

<Preview>

```mdx {7}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - Header.astro eine **wichtige** Datei
    - Title.astro

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {4}
{% filetree %}
- src
  - components
    - Header.astro eine **wichtige** Datei
    - Title.astro
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - Header.astro eine **wichtige** Datei
    - Title.astro

</FileTree>

</Preview>

### Platzhalter hinzuf√ºgen

F√ºge Platzhalterdateien und Verzeichnisse hinzu, indem du entweder `...` oder `‚Ä¶` als Namen verwendest.
Dies kann n√ºtzlich sein, um einem Leser zu zeigen, dass ein Ordner mehr Elemente enthalten soll, ohne sie alle explizit anzugeben.

<Preview>

```mdx {8}
import { FileTree } from '@astrojs/starlight/components';

<FileTree>

- src
  - components
    - Header.astro
    - ‚Ä¶

</FileTree>
```

<Fragment slot="markdoc">

```markdoc {5}
{% filetree %}
- src
  - components
    - Header.astro
    - ‚Ä¶
{% /filetree %}
```

</Fragment>

<FileTree slot="preview">

- src
  - components
    - Header.astro
    - ‚Ä¶

</FileTree>

</Preview>

## `<FileTree>`-Eigenschaften

**Implementation:** [`FileTree.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/FileTree.astro)

Die Komponente `<FileTree>` akzeptiert keine Eigenschaften.


 This is the content for the doc docs/src/content/docs/de/components/icons.mdx 

 ---
title: Symbole
description: Erfahre, wie du Symbole in Starlight anzeigen kannst.
---

import { Icon } from '@astrojs/starlight/components';

Um Symbole aus Starlights [eingebautem Symbol-Set](/de/reference/icons/#alle-symbole) anzuzeigen, verwende die `<Icon>` Komponente.

import Preview from '~/components/component-preview.astro';

<Preview>

<Icon
	slot="preview"
	name="open-book"
	color="var(--sl-color-text-accent)"
	size="4rem"
/>

</Preview>

## Import

```tsx
import { Icon } from '@astrojs/starlight/components';
```

## Verwendung

Zeigt ein Symbol mit der Komponente `<Icon>` an.
Ein Symbole ben√∂tigt einen [`name`](#name), der auf [eines der in Starlight eingebauten Icons](/de/reference/icons/#alle-symbole) gesetzt ist, und kann optional ein [`label`](#label) enthalten, um Kontext f√ºr Screenreader zu liefern.

<Preview>

```mdx
import { Icon } from '@astrojs/starlight/components';

<Icon name="star" />
<Icon name="starlight" label="Das Starlight-Logo" />
```

<Fragment slot="markdoc">

```markdoc
{% icon name="star" /%}
{% icon name="starlight" label="Das Starlight-Logo" /%}
```

</Fragment>

<Fragment slot="preview">
	<Icon name="star" />
	<Icon name="starlight" label="Das Starlight-Logo" />
</Fragment>

</Preview>

### Anpassen von Symbolen

Die Attribute [`size`](#size) und [`color`](#color) k√∂nnen verwendet werden, um das Aussehen des Symbols mit CSS-Einheiten und Farbwerten anzupassen.
Das Attribut [`class`](#class) kann verwendet werden, um dem Symbol eigene CSS-Klassen hinzuzuf√ºgen.

<Preview>

```mdx
import { Icon } from '@astrojs/starlight/components';

<Icon name="star" color="goldenrod" size="2rem" />
<Icon name="rocket" color="var(--sl-color-text-accent)" />
```

<Fragment slot="markdoc">

```markdoc
{% icon name="star" color="goldenrod" size="2rem" /%}
{% icon name="rocket" color="var(--sl-color-text-accent)" /%}
```

</Fragment>

<Fragment slot="preview">
	<Icon name="star" color="goldenrod" size="2rem" />
	<Icon name="rocket" color="var(--sl-color-text-accent)" />
</Fragment>

</Preview>

## `<Icon>`-Eigenschaften

**Implementation:** [`Icon.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Icon.astro)

Die Komponente `<Icon>` akzeptiert die folgenden Eigenschaften:

### `name`

**Erforderlich**  
**Typ:** `string`

Der Name des anzuzeigenden Symbols wird auf [eines der in Starlight integrierten Symbole](/de/reference/icons/#alle-symbole) gesetzt.

### `label`

**Typ:** `string`

Eine optionale Beschriftung, die den Kontext f√ºr unterst√ºtzende Technologien wie Bildschirmleseger√§te liefert.

Wenn `label` nicht gesetzt ist, wird das Symbol von assistiven Technologien vollst√§ndig ausgeblendet.
In diesem Fall ist darauf zu achten, dass der Kontext auch ohne das Symbol verst√§ndlich ist.
Ein Link, der nur das Symbol enth√§lt, **muss** das Attribut `label` enthalten, um zug√§nglich zu sein, aber wenn ein Link Text enth√§lt und das Symbol rein dekorativ ist, kann es sinnvoll sein, das `label` wegzulassen.

### `size`

**Typ:** `string`

Die Gr√∂√üe des Symbols in CSS-Einheiten.

### `color`

**Typ:** `string`

Die Farbe des Symbols unter Verwendung eines CSS-Farbwerts.

### `class`

**Typ:** `string`

Benutzerdefinierte CSS-Klassen, die dem Symbol hinzugef√ºgt werden k√∂nnen.


 This is the content for the doc docs/src/content/docs/de/components/link-buttons.mdx 

 ---
title: Link-Buttons
description: Erfahre, wie du in Starlight Link-Buttons f√ºr visuell eindeutige Call-to-Action-Links erstellen.
---

import { LinkButton } from '@astrojs/starlight/components';

Um visuell eindeutige Call-to-Action-Links anzuzeigen, verwenden Sie die Komponente `<LinkButton>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<LinkButton slot="preview" href="/de/getting-started/">
	Lies die Dokumentationen
</LinkButton>

</Preview>

## Import

```tsx
import { LinkButton } from '@astrojs/starlight/components';
```

## Verwendung

Verwende die Komponente `<LinkButton>`, um einen visuell eindeutigen Call-to-Action-Link anzuzeigen.
Ein Link-Button ist n√ºtzlich, um Nutzer zu den relevantesten oder handlungsrelevanten Inhalten zu leiten und wird h√§ufig auf Landing Pages verwendet.

Ein `<LinkButton>` ben√∂tigt ein [`href`](#href) Attribut.
Optional kann das Aussehen des Link-Buttons mit dem Attribut [`variant`](#variant) angepasst werden, das auf `primary` (Standard), `secondary` oder `minimal` gesetzt werden kann.

<Preview>

```mdx
import { LinkButton } from '@astrojs/starlight/components';

<LinkButton href="/de/getting-started/">Los geht's</LinkButton>
<LinkButton href="/de/reference/configuration/" variant="secondary">
	Konfiguration Referenz
</LinkButton>
```

<Fragment slot="markdoc">

```markdoc
{% linkbutton href="/de/getting-started/" %}Los geht's{% /linkbutton %}

{% linkbutton href="/de/reference/configuration/" variant="secondary" %}
Konfiguration Referenz
{% /linkbutton %}
```

</Fragment>

<Fragment slot="preview">
	<LinkButton href="/de/getting-started/">Los geht's</LinkButton>
	<LinkButton href="/de/reference/configuration/" variant="secondary">
		Konfiguration Referenz
	</LinkButton>
</Fragment>

</Preview>

### Hinzuf√ºgen von Symbolen zu Link-Buttons

F√ºge ein Symbol in einen Link-Button ein, indem du das Attribut [`icon`](#icon) auf den Namen [eines von Starlights eingebauten Symbolen](/de/reference/icons/#alle-symbole) setzt.

Das Attribut [`iconPlacement`](#iconplacement) kann verwendet werden, um das Symbol vor dem Text zu platzieren, indem man es auf `start` setzt (Standardwert ist `end`).

<Preview>

```mdx {6-7}
import { LinkButton } from '@astrojs/starlight/components';

<LinkButton
	href="https://docs.astro.build"
	variant="secondary"
	icon="external"
	iconPlacement="start"
>
	Verwandt: Astro
</LinkButton>
```

<Fragment slot="markdoc">

```markdoc {4-5}
{% linkbutton
   href="https://docs.astro.build"
	 variant="secondary"
	 icon="external"
	 iconPlacement="start" %}
Verwandt: Astro
{% /linkbutton %}
```

</Fragment>

<LinkButton
	slot="preview"
	href="https://docs.astro.build"
	variant="secondary"
	icon="external"
	iconPlacement="start"
>
	Verwandt: Astro
</LinkButton>

</Preview>

## `<LinkButton>`-Eigenschaften

**Implementation:** [`LinkButton.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/LinkButton.astro)

Die `<LinkButton>`-Komponente akzeptiert die folgenden Eigenschaften und auch alle [anderen `<a>`-Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a):

### `href`

**Erforderlich**  
**Typ:** `string`

Die URL, auf die der Link-Button zeigt.

### `variant`

**Typ:** `'primary' | 'secondary' | 'minimal'`  
**Standard:** `'primary'`

Das Aussehen des Link-Button.
Setze auf `primary` f√ºr einen auff√§lligen Call-to-Action-Link mit der Akzentfarbe des Themas, auf `secondary` f√ºr einen weniger auff√§lligen Link oder auf `minimal` f√ºr einen Link mit minimalem Styling.

### `icon`

**Typ:** `string`

Ein Link-Button kann ein `icon`-Attribut enthalten, das auf den Namen [eines von Starlights eingebauten Symbolen](/de/reference/icons/#alle-symbole) gesetzt ist.

### `iconPlacement`

**Typ:** `'start' | 'end'`  
**Standard:** `'end'`

Bestimmt die Platzierung des Symbols im Verh√§ltnis zum Text des Link-Buttons.


 This is the content for the doc docs/src/content/docs/de/components/link-cards.mdx 

 ---
title: Link-Karten
description: Erfahrene, wie du in Starlight Links prominent als Karten anzeigen.
sidebar:
  order: 3
---

import { LinkCard } from '@astrojs/starlight/components';

Um Links zu verschiedenen Seiten prominent anzuzeigen, verwende die Komponente `<LinkCard>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<LinkCard
	slot="preview"
	title="Starlight anpassen"
	description="Lerne, wie du deine Starlight-Site mit deinem Logo, eigenen Schriftarten, Landing-Page-Design und vielem mehr zu deiner eigenen machen kannst."
	href="/de/guides/customization/"
/>

</Preview>

## Import

```tsx
import { LinkCard } from '@astrojs/starlight/components';
```

## Verwendung

Zeige einen Link mithilfe der Komponente `<LinkCard>` deutlich sichtbar an.
Jede `<LinkCard>` erfodert ein [`title`](#title) und ein [`href`](#href)-Attribut.

<Preview>

```mdx
import { LinkCard } from '@astrojs/starlight/components';

<LinkCard
	title="Inhalte in Markdown verfassen"
	href="/de/guides/authoring-content/"
/>
```

<Fragment slot="markdoc">

```markdoc
{% linkcard title="Inhalte in Markdown verfassen" href="/de/guides/authoring-content/" /%}
```

</Fragment>

<LinkCard
	slot="preview"
	title="Inhalte in Markdown verfassen"
	href="/de/guides/authoring-content/"
/>

</Preview>

### F√ºge eine Linkbeschreibung hinzu

F√ºge einer Link-Karte mit dem Attribut [`description`](#description) eine kurze Beschreibung hinzu.

<Preview>

```mdx {6}
import { LinkCard } from '@astrojs/starlight/components';

<LinkCard
	title="Internationalisierung"
	href="/de/guides/i18n/"
	description="Konfiguriere Starlight zur Unterst√ºtzung mehrerer Sprachen."
/>
```

<Fragment slot="markdoc">

```markdoc {4}
{% linkcard
   title="Internationalisierung"
	 href="/de/guides/i18n/"
	 description="Konfiguriere Starlight zur Unterst√ºtzung mehrerer Sprachen." /%}
```

</Fragment>

<LinkCard
	slot="preview"
	title="Internationalisierung"
	href="/de/guides/i18n/"
	description="Konfiguriere Starlight zur Unterst√ºtzung mehrerer Sprachen."
/>

</Preview>

### Gruppiere Link-Karten

Zeige mehrere Link-Karten nebeneinander an, wenn gen√ºgend Platz vorhanden ist, indem du sie mit der Komponente [`<CardGrid>`](/de/components/card-grids/) gruppierst.
Ein Beispiel findest du im Handbuch [‚ÄúGruppiere Link-Karten‚Äù](/de/components/card-grids/#link-karten-gruppieren).

## `<LinkCard>`-Eigenschaften

**Implementation:** [`LinkCard.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/LinkCard.astro)

Die Komponente `<LinkCard>` akzeptiert die folgenden Eigenschaften sowie alle anderen [`<a>`-Elementattribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a):

### `title`

**Erforderlich**  
**Typ:** `string`

Der Titel der anzuzeigenden Link-Karte.

### `href`

**Erforderlich**  
**Typ:** `string`

Die URL, auf die bei Interaktion mit der Karte verwiesen werden soll.

### `description`

**Typ:** `string`

Eine optionale Beschreibung, welche unter dem Titel angezeigt wird.


 This is the content for the doc docs/src/content/docs/de/components/steps.mdx 

 ---
title: Schritte
description: Hier erf√§hrst du, wie du nummerierte Listen mit Aufgaben erstellen kannst, um Schritt-f√ºr-Schritt-Anleitungen in Starlight zu erstellen.
---

import { Tabs, TabItem, Steps } from '@astrojs/starlight/components';

Um eine nummerierte Liste von Aufgaben zu gestalten und Schritt-f√ºr-Schritt-Anleitungen zu erstellen, verwendest du die Komponente `<Steps>`.

import Preview from '~/components/component-preview.astro';

<Preview>

<Steps slot="preview">

1. Erstelle ein neues Starlight-Projekt:

   <Tabs syncKey="pkg">

   <TabItem label="npm">

   ```sh
   npm create astro@latest -- --template starlight
   ```

   </TabItem>

   <TabItem label="pnpm">

   ```sh
   pnpm create astro --template starlight
   ```

   </TabItem>

   <TabItem label="Yarn">

   ```sh
   yarn create astro --template starlight
   ```

   </TabItem>

   </Tabs>

2. Schreibe deine erste Dokumentationsseite.

</Steps>

</Preview>

## Import

```tsx
import { Steps } from '@astrojs/starlight/components';
```

## Verwendung

Verwende die Komponente `<Steps>`, um nummerierte Listen von Aufgaben zu gestalten.
Dies ist n√ºtzlich f√ºr komplexere Schritt-f√ºr-Schritt-Anleitungen, bei denen jeder Schritt deutlich hervorgehoben werden muss.

Wickle `<Steps>` um eine geordnete Standard-Markdown-Liste.
Die √ºbliche Markdown-Syntax ist innerhalb von `<Steps>` anwendbar.

<Preview>

````mdx
import { Steps } from '@astrojs/starlight/components';

<Steps>

1. Importiere die Komponente in deine MDX-Datei:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wickle `<Steps>` um deine geordneten Listenelemente.

</Steps>
````

<Fragment slot="markdoc">

````markdoc
{% steps %}

1. Importiere die Komponente in deine MDX-Datei:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wickle `<Steps>` um deine geordneten Listenelemente.

{% /steps %}
````

</Fragment>

<Steps slot="preview">

1. Importiere die Komponente in deine MDX-Datei:

   ```js
   import { Steps } from '@astrojs/starlight/components';
   ```

2. Wickle `<Steps>` um deine geordneten Listenelemente.

</Steps>

</Preview>

## `<Steps>`-Eigenschaften

**Implementation:** [`Steps.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Steps.astro)

Die Komponente `<Steps>` akzeptiert keine Eigenschaften.


 This is the content for the doc docs/src/content/docs/de/components/tabs.mdx 

 ---
title: Registerkarten
description: Lerne, wie du in Starlight Oberfl√§chen mit Registerkarten erstellst, um gleichwertige Informationen zu gruppieren.
---

import { Tabs, TabItem } from '@astrojs/starlight/components';

Um eine Oberfl√§che mit Registerkarten zu erstellen, verwende die Komponenten `<Tabs>` und `<TabItem>`.
Registerkarten sind n√ºtzlich, um gleichwertige Informationen zu gruppieren, wenn ein Nutzer nur eine von mehreren Optionen sehen muss.

import Preview from '~/components/component-preview.astro';

<Preview>

<Tabs slot="preview">
	<TabItem label="Sterne">Sirius, Wega, Betelgeuse</TabItem>
	<TabItem label="Monde">Io, Europa, Ganymed</TabItem>
</Tabs>

</Preview>

## Import

```tsx
import { Tabs, TabItem } from '@astrojs/starlight/components';
```

## Verwendung

Zeige eine Oberfl√§che mit Registerkarten an, indem du die Komponenten `<Tabs>` und `<TabItem>` benutzt.
Jedes `<TabItem>` muss ein [`label`](#label) haben, um es den Benutzern anzuzeigen.

<Preview>

```mdx
import { Tabs, TabItem } from '@astrojs/starlight/components';

<Tabs>
	<TabItem label="Sterne">Sirius, Wega, Betelgeuse</TabItem>
	<TabItem label="Monde">Io, Europa, Ganymed</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc
{% tabs %}
{% tabitem label="Sterne" %}
Sirius, Wega, Betelgeuse
{% /tabitem %}

{% tabitem label="Monde" %}
Io, Europa, Ganymed
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Tabs slot="preview">
	<TabItem label="Sterne">Sirius, Wega, Betelgeuse</TabItem>
	<TabItem label="Monde">Io, Europa, Ganymed</TabItem>
</Tabs>

</Preview>

### Registerkarten synchronisieren

Halte mehrere Registerkartengruppen synchron, indem du das Attribut [`syncKey`](#synckey) hinzuf√ºgst.

Alle `<Tabs>` auf einer Seite mit demselben Wert f√ºr `syncKey` zeigen dasselbe aktive Label an.
Auf diese Weise kann dein Leser eine Auswahl treffen (z. B. sein Betriebssystem oder den Paketmanager), die dann beim Navigieren durch die Seiten beibehalten wird.

Um zusammenh√§ngende Tabs zu synchronisieren, f√ºge eine identische `syncKey`-Eigenschaft zu jeder `<Tabs>`-Komponente hinzu und stelle sicher, dass sie alle die gleichen `<TabItem>`-Beschriftungen verwenden:

<Preview>

```mdx 'syncKey="constellations"'
import { Tabs, TabItem } from '@astrojs/starlight/components';

_Ein paar Sterne:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">Bellatrix, Rigel, Betelgeuse</TabItem>
	<TabItem label="Zwillinge">Pollux, Castor A, Castor B</TabItem>
</Tabs>

_Ein paar Exoplaneten:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">HD 34445 b, Gliese 179 b, Wasp-82 b</TabItem>
	<TabItem label="Zwillinge">Pollux b, HAT-P-24b, HD 50554 b</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc 'syncKey="constellations"'
_Ein paar Sterne:_

{% tabs syncKey="constellations" %}
{% tabitem label="Orion" %}
Bellatrix, Rigel, Betelgeuse
{% /tabitem %}

{% tabitem label="Zwillinge" %}
Pollux, Castor A, Castor B
{% /tabitem %}
{% /tabs %}

_Ein paar Exoplaneten:_

{% tabs syncKey="constellations" %}
{% tabitem label="Orion" %}
HD 34445 b, Gliese 179 b, Wasp-82 b
{% /tabitem %}

{% tabitem label="Zwillinge" %}
Pollux b, HAT-P-24b, HD 50554 b
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Fragment slot="preview">

_Ein paar Sterne:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">Bellatrix, Rigel, Betelgeuse</TabItem>
	<TabItem label="Zwillinge">Pollux, Castor A, Castor B</TabItem>
</Tabs>

_Ein paar Exoplaneten:_

<Tabs syncKey="constellations">
	<TabItem label="Orion">HD 34445 b, Gliese 179 b, Wasp-82 b</TabItem>
	<TabItem label="Zwillinge">Pollux b, HAT-P-24b, HD 50554 b</TabItem>
</Tabs>

</Fragment>

</Preview>

### Hinzuf√ºgen von Symbolen zu Registerkarten

F√ºge ein Symbol in ein Tab-Element ein, indem du das Attribut [`icon`](#icon) auf den Namen [eines der in Starlight eingebauten Symbole](/de/reference/icons/#alle-symbole) setzt, um ein Symbol neben dem Label anzuzeigen.

<Preview>

```mdx /icon="\w+"/
import { Tabs, TabItem } from '@astrojs/starlight/components';

<Tabs>
	<TabItem label="Sterne" icon="star">
		Sirius, Wega, Betelgeuse
	</TabItem>
	<TabItem label="Monde" icon="moon">
		Io, Europa, Ganymed
	</TabItem>
</Tabs>
```

<Fragment slot="markdoc">

```markdoc /icon="\w+"/
{% tabs %}
{% tabitem label="Sterne" icon="star" %}
Sirius, Wega, Betelgeuse
{% /tabitem %}

{% tabitem label="Monde" icon="moon" %}
Io, Europa, Ganymed
{% /tabitem %}
{% /tabs %}
```

</Fragment>

<Tabs slot="preview">
	<TabItem label="Sterne" icon="star">
		Sirius, Wega, Betelgeuse
	</TabItem>
	<TabItem label="Monde" icon="moon">
		Io, Europa, Ganymed
	</TabItem>
</Tabs>

</Preview>

## `<Tabs>`-Eigenschaften

**Implementation:** [`Tabs.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Tabs.astro)

Die Komponente `<Tabs>` fasst mehrere `<TabItem>`-Komponenten zusammen und akzeptiert die folgenden Eigenschaften:

### `syncKey`

**Typ:** `string`

Ein Schl√ºssel, der verwendet wird, um mehrere Registerkartengruppen √ºber mehrere Seiten hinweg zu synchronisieren.

## `<TabItem>`-Eigenschaften

**Implementation:** [`TabItem.astro`](https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/TabItem.astro)

Ein Satz von Tabs besteht aus Tab-Elementen, die jeweils die folgenden Eigenschaften haben:

### `label`

**Erforderlich**  
**Typ:** `string`

Eine Registerkarte muss ein Attribut `label` enthalten, das auf den Text gesetzt ist, der in der Registerkarte angezeigt werden soll.

### `icon`

**Typ:** `string`

Jedes Tab-Element kann ein `icon`-Attribut enthalten, das auf den Namen [eines von Starlights eingebauten Icons](/de/reference/icons/#alle-symbole) gesetzt ist, um ein Icon neben dem Label anzuzeigen.


 This is the content for the doc docs/src/content/docs/de/components/using-components.mdx 

 ---
title: Verwendung von Komponenten
description: Verwendung von Komponenten in MDX und Markdoc mit Starlight.
sidebar:
  order: 1
---

Mit Komponenten kannst du auf einfache Weise einen Teil der Benutzeroberfl√§che oder ein Styling konsistent wiederverwendem.
Beispiele k√∂nnten eine Link-Karte oder eine YouTube-Einbettung sein.
Starlight unterst√ºtzt die Verwendung von Komponenten in [MDX](https://mdxjs.com/)- und [Markdoc](https://markdoc.dev/)-Dateien und stellt dir einige g√§ngige Komponenten zur Verf√ºgung, die du verwenden kannst.

[Erfahre mehr √ºber die Erstellung von Komponenten in den Astro Docs](https://docs.astro.build/de/basics/astro-components/).

## Verwendung einer Komponente in MDX

Du kannst eine Komponente verwenden, indem du sie in deine MDX-Datei importierst und sie dann als JSX-Tag wiedergibst.
Diese sehen wie HTML-Tags aus, beginnen aber mit einem Gro√übuchstaben, der dem Namen in der `Import`-Anweisung entspricht:

```mdx
---
# src/content/docs/example.mdx
title: Willkommen bei meiner Dokumentation
---

import { Icon } from '@astrojs/starlight/components';
import CustomCard from '../../components/CustomCard.astro';

<Icon name="open-book" />

<CustomCard>
	Komponenten k√∂nnen auch **verschachtelte Inhalte** enthalten.
</CustomCard>
```

Da Starlight von Astro unterst√ºtzt wird, kannst du in deinen MDX-Dateien Unterst√ºtzung f√ºr Komponenten hinzuf√ºgen, die mit einem beliebigen [unterst√ºtzten UI-Framework (React, Preact, Svelte, Vue, Solid und Alpine)](https://docs.astro.build/de/guides/framework-components/) erstellt wurden.
Weitere Informationen √ºber [Verwendung von Komponenten in MDX](https://docs.astro.build/de/guides/integrations-guide/mdx/#using-components-in-mdx) findest du in der Astro-Dokumentation.

## Verwendung einer Komponente in Markdoc

F√ºge Unterst√ºtzung f√ºr das Verfassen von Inhalten in Markdoc hinzu, indem du unsere [Markdoc-Einrichtungsanleitung](/de/guides/authoring-content/#markdoc) befolgst.

Mit der Starlight Markdoc-Voreinstellung kannst du die in Starlight eingebauten Komponenten mit der Markdoc-Tag-Syntax `{% %}` verwenden.
Im Gegensatz zu MDX m√ºssen die Komponenten in Markdoc nicht importiert werden.
Das folgende Beispiel stellt Starlights [Kartenkomponente](/de/components/cards/) in einer Markdoc-Datei dar:

```markdoc
---
# src/content/docs/example.mdoc
title: Willkommen bei meiner Dokumentation
---

{% card title="Stars" icon="star" %}
Sirius, Wega, Betelgeuse
{% /card %}
```

Weitere Informationen zur Verwendung von Komponenten in Markdoc-Dateien findst du in der [Astro Markdoc Integrationsdokumentation](https://docs.astro.build/de/guides/integrations-guide/markdoc/#render-components).

## Integrierte Komponenten

Starlight bietet eingebaute Komponenten f√ºr g√§ngige Dokumentationsanwendungen.
Diese Komponenten sind aus dem Paket `@astrojs/starlight/components` in MDX-Dateien und aus dem [Starlight Markdoc preset](/de/guides/authoring-content/#markdoc) in Markdoc-Dateien verf√ºgbar.

In der Seitenleiste findst du eine Liste der verf√ºgbaren Komponenten und deren Verwendung.

## Kompatibilit√§t mit den Stilen von Starlight

Starlight wendet Standardstile auf deinen Markdown-Inhalt an, z.B. f√ºgt es einen Rand zwischen den Elementen hinzu.
Wenn diese Stile mit dem Erscheinungsbild deiner Komponente in Konflikt stehen, setze die Klasse `not-content` f√ºr deine Komponente, um sie zu deaktivieren.

```astro 'class="not-content"'
---
// src/components/Example.astro
---

<div class="not-content">
	<p>Die Standard-Inhaltsgestaltung von Starlight wirkt sich nicht aus.</p>
</div>
```

## Komponenteneigenschaften

Verwende den Typ [`ComponentProps`](https://docs.astro.build/de/guides/typescript/#componentprops-type) aus `astro/types`, um auf die von einer Komponente akzeptierten `Props` zu verweisen, auch wenn sie nicht von der Komponente selbst exportiert werden.
Dies kann hilfreich sein, wenn man eine existierende Komponente verpackt oder erweitert.

Das folgende Beispiel benutzt `ComponentProps`, um den Typ der Eigenschaften zu ermitteln, die von Starlights eingebauter Komponente `Icon` akzeptiert werden:

```astro
---
// src/components/Example.astro
import type { ComponentProps } from 'astro/types';
import { Icon } from '@astrojs/starlight/icon';

type IconProps = ComponentProps<typeof Icon>;
---
```


 This is the content for the doc docs/src/content/docs/de/environmental-impact.md 

 ---
title: Umweltfreundliche Dokumente
description: Erfahre, wie Starlight dir helfen kann, umweltfreundlichere Dokumentationen zu erstellen und deinen √∂kologischen Fu√üabdruck zu verringern.
---

Sch√§tzungen √ºber die Auswirkungen der Webindustrie auf das Klima liegen zwischen [2 %][sf] und [4 % der weltweiten Kohlenstoffemissionen][bbc], was in etwa den Emissionen der Luftfahrtindustrie entspricht.
Es gibt viele komplexe Faktoren bei der Berechnung der √∂kologischen Auswirkungen einer Website, aber dieser Leitfaden enth√§lt einige Tipps, wie du den √∂kologischen Fu√üabdruck deiner Docs-Website verringern kannst.

Die gute Nachricht ist, dass die Wahl von Starlight ein guter Anfang ist.
Laut dem Website Carbon Calculator ist diese Website [sauberer als 99 % der getesteten Websiten][sl-carbon] und erzeugt 0,01g CO‚ÇÇ pro Seitenbesuch.

## Seitengewicht

Je mehr Daten eine Website √ºbertr√§gt, desto mehr Energieressourcen ben√∂tigt sie.
Im April 2023 musste ein Nutzer laut [Daten aus dem HTTP-Archiv][http] f√ºr die durchschnittliche Website mehr als 2.000 KB herunterladen.

Starlight erstellt Seiten, die so leicht wie m√∂glich sind.
So l√§dt ein Benutzer beim ersten Besuch weniger als 50 KB an komprimierten Daten herunter - nur 2,5 % des Medianwerts des HTTP-Archivs.
Mit einer guten Caching-Strategie k√∂nnen nachfolgende Besuche sogar nur 10 KB herunterladen.

### Bilder

W√§hrend Starlight eine gute Grundlage bietet, k√∂nnen Bilder, die du deinen Dokumentseiten hinzuf√ºgst, das Seitengewicht schnell erh√∂hen.
Starlight nutzt die [optimierte Asset-Unterst√ºtzung][Assets] von Astro, um lokale Bilder in deinen Markdown- und MDX-Dateien zu optimieren.

### UI-Komponenten

Komponenten, die mit UI-Frameworks wie React oder Vue erstellt wurden, k√∂nnen leicht gro√üe Mengen an JavaScript zu einer Seite hinzuf√ºgen.
Da Starlight auf Astro aufbaut, laden Komponenten wie diese dank [Astro Islands][islands] standardm√§√üig **kein clientseitiges JavaScript**.

### Caching

Caching wird verwendet, um zu kontrollieren, wie lange ein Browser Daten speichert und wiederverwendet, die er bereits heruntergeladen hat.
Eine gute Caching-Strategie stellt sicher, dass ein Benutzer neue Inhalte so schnell wie m√∂glich erh√§lt, wenn sich diese √§ndern, vermeidet aber auch, dass derselbe Inhalt unn√∂tigerweise immer wieder heruntergeladen wird, wenn er sich nicht ge√§ndert hat.

Die gebr√§uchlichste Art, das Zwischenspeichern zu konfigurieren, ist der [`Cache-Control` HTTP-Header][cache].
Wenn du Starlight verwendest, kannst du eine lange Cache-Zeit f√ºr alles im Verzeichnis `/_astro/` einstellen.
Dieses Verzeichnis enth√§lt CSS, JavaScript und andere geb√ºndelte Inhalte, die sicher f√ºr immer zwischengespeichert werden k√∂nnen, wodurch unn√∂tige Downloads vermieden werden:

```
Cache-Control: public, max-age=604800, immutable
```

Wie du das Caching konfigurierst, h√§ngt von deinem Webhost ab. Zum Beispiel wendet Vercel diese Caching-Strategie f√ºr dich an, ohne dass eine Konfiguration erforderlich ist, w√§hrend du [benutzerdefinierte Header f√ºr Netlify][ntl-headers] einstellen kannst, indem du eine `public/_headers`-Datei zu deinem Projekt hinzuf√ºgst:

```
/_astro/*
  Cache-Control: public
  Cache-Control: max-age=604800
  Cache-Control: immutable
```

[cache]: https://csswizardry.com/2019/03/cache-control-for-civilians/
[ntl-headers]: https://docs.netlify.com/routing/headers/

## Stromverbrauch

Die Art und Weise, wie eine Website aufgebaut ist, kann sich auf den Stromverbrauch auswirken, den sie auf dem Ger√§t des Benutzers ben√∂tigt.
Durch die Verwendung von minimalem JavaScript reduziert Starlight die Rechenleistung, die das Telefon, Tablet oder der Computer eines Nutzers zum Laden und Rendern von Seiten ben√∂tigt.

Sei jedoch vorsichtig, wenn du Funktionen wie analytische Tracking-Skripte oder JavaScript-lastige Inhalte wie Videoeinbettungen hinzuf√ºgst, da diese den Stromverbrauch der Seite erh√∂hen k√∂nnen.
Wenn du Analysen ben√∂tigst, solltest du eine schlanke Option wie [Cabin][cabin], [Fathom][fathom] oder [Plausible][plausible] w√§hlen.
Einbettungen wie YouTube- und Vimeo-Videos k√∂nnen verbessert werden, indem man auf [Laden des Videos bei Benutzerinteraktion][lazy-video] wartet.
Pakete wie [`astro-embed`][embed] k√∂nnen bei g√§ngigen Diensten helfen.

:::tip[Wusstest du schon?]
Das Parsen und Kompilieren von JavaScript ist eine der aufw√§ndigsten Aufgaben, die ein Browser zu erledigen hat.
Verglichen mit dem Rendern eines JPEG-Bildes derselben Gr√∂√üe kann die [Verarbeitung von JavaScript mehr als 30 Mal so lange dauern][cost-of-js].
:::

[cabin]: https://withcabin.com/
[fathom]: https://usefathom.com/
[plausible]: https://plausible.io/
[lazy-video]: https://web.dev/iframe-lazy-loading/
[embed]: https://www.npmjs.com/package/astro-embed
[cost-of-js]: https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e

## Hosting

Wo eine Website gehostet wird, kann einen gro√üen Einfluss darauf haben, wie umweltfreundlich deine Dokumentationsseite ist.
Rechenzentren und Serveranlagen k√∂nnen gro√üe √∂kologische Auswirkungen haben, einschlie√ülich eines hohen Stromverbrauchs und eines intensiven Wasserverbrauchs.

Wenn du dich f√ºr einen Hoster entscheidest, der erneuerbare Energien einsetzt, wird deine Website weniger Kohlenstoffemissionen verursachen. Das [Green Web Directory][gwb] ist ein Tool, das dir helfen kann, Hosting-Unternehmen zu finden.

[gwb]: https://www.thegreenwebfoundation.org/directory/

## Vergleiche

Bist du neugierig, wie andere Docs-Frameworks im Vergleich abschneiden?
Diese Tests mit dem [Website Carbon Calculator][wcc] vergleichen √§hnliche Seiten, die mit verschiedenen Tools erstellt wurden.

| Framework                   | CO‚ÇÇ pro Seitenaufruf | Bewertung |
| --------------------------- | -------------------- | :-------: |
| [Starlight][sl-carbon]      | 0.01g                |    A+     |
| [Read the Docs][rtd-carbon] | 0.05g                |    A+     |
| [Sphinx][sx-carbon]         | 0.06g                |    A+     |
| [VitePress][vp-carbon]      | 0.07g                |    A+     |
| [Docus][dc-carbon]          | 0.09g                |    A+     |
| [docsify][dy-carbon]        | 0.10g                |     A     |
| [Nextra][nx-carbon]         | 0.11g                |     A     |
| [MkDocs][mk-carbon]         | 0.19g                |     B     |
| [Docusaurus][ds-carbon]     | 0.21g                |     B     |
| [GitBook][gb-carbon]        | 0.43g                |     C     |
| [Mintlify][mt-carbon]       | 1.22g                |     F     |

<small>Daten erhoben am 22. Juli 2024. Klicke auf einen Link, um aktuelle Zahlen zu sehen.</small>

[sl-carbon]: https://www.websitecarbon.com/website/starlight-astro-build-getting-started/
[vp-carbon]: https://www.websitecarbon.com/website/vitepress-dev-guide-what-is-vitepress/
[dc-carbon]: https://www.websitecarbon.com/website/docus-dev-introduction-getting-started/
[sx-carbon]: https://www.websitecarbon.com/website/sphinx-doc-org-en-master-usage-quickstart-html/
[mk-carbon]: https://www.websitecarbon.com/website/mkdocs-org-getting-started/
[nx-carbon]: https://www.websitecarbon.com/website/nextra-site-docs-docs-theme-start/
[dy-carbon]: https://www.websitecarbon.com/website/docsify-js-org/
[ds-carbon]: https://www.websitecarbon.com/website/docusaurus-io-docs/
[rtd-carbon]: https://www.websitecarbon.com/website/docs-readthedocs-io-en-stable-index-html/
[gb-carbon]: https://www.websitecarbon.com/website/docs-gitbook-com/
[mt-carbon]: https://www.websitecarbon.com/website/mintlify-com-docs-quickstart/

## Weitere Ressourcen

### Werkzeuge

- [Website Carbon Calculator][wcc]
- [GreenFrame](https://greenframe.io/)
- [Ecograder](https://ecograder.com/)
- [WebPageTest Kohlenstoffkontrolle](https://www.webpagetest.org/carbon-control/)
- [Ecoping](https://ecoping.earth/)

### Artikel und Vortr√§ge

- ["Building a greener web"](https://youtu.be/EfPoOt7T5lg), Vortrag von Michelle Barker
- ["Sustainable Web Development Strategies Within An Organization"](https://www.smashingmagazine.com/2022/10/sustainable-web-development-strategies-organization/), Artikel von Michelle Barker
- ["A sustainable web for everyone"](https://2021.stateofthebrowser.com/speakers/tom-greenwood/), Vortrag von Tom Greenwood
- ["How Web Content Can Affect Power Usage"](https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/), Artikel von Benjamin Poulain und Simon Fraser

[sf]: https://www.sciencefocus.com/science/what-is-the-carbon-footprint-of-the-internet/
[bbc]: https://www.bbc.com/future/article/20200305-why-your-internet-habits-are-not-as-clean-as-you-think
[http]: https://httparchive.org/reports/state-of-the-web
[assets]: https://docs.astro.build/de/guides/images/
[islands]: https://docs.astro.build/de/concepts/islands/
[wcc]: https://www.websitecarbon.com/


 This is the content for the doc docs/src/content/docs/de/getting-started.mdx 

 ---
title: Erste Schritte
description: Lerne wie du deine n√§chste Dokumentationsseite mit Starlight und Astro erstellst.
---

import { Tabs, TabItem } from '@astrojs/starlight/components';

Starlight ist ein voll funktionsf√§higes Dokumentationsframework, welches auf [Astro](https://astro.build) aufbaut.
Diese Anleitung wird dir helfen, mit einem neuen Projekt zu beginnen.
Siehe dir die [manuellen Einrichtungsanweisungen](/de/manual-setup/) an, um Starlight zu einem bestehenden Astro-Projekt hinzuzuf√ºgen.

## Schnellstart

### Erstelle ein neues Projekt

Du kannst ein neues Astro + Starlight Projekt mit dem folgenden Befehl erstellen:

<Tabs syncKey="pkg">
<TabItem label="npm">

```sh
npm create astro@latest -- --template starlight
```

</TabItem>
<TabItem label="pnpm">

```sh
pnpm create astro --template starlight
```

</TabItem>
<TabItem label="Yarn">

```sh
yarn create astro --template starlight
```

</TabItem>
</Tabs>

Damit wird ein neues [Projektverzeichnis](/de/guides/project-structure/) mit allen erforderlichen Dateien und Konfigurationen f√ºr deine Website erstellt.

:::tip[In Aktion sehen]
Probiere Starlight in deinem Browser aus:
[√∂ffne die Vorlage in StackBlitz](https://stackblitz.com/github/withastro/starlight/tree/main/examples/basics).
:::

### Starte den Entwicklungsserver

Wenn du lokal arbeitest, kannst du mit dem [Astro-Entwicklungsserver](https://docs.astro.build/de/reference/cli-reference/#astro-dev) eine Vorschau deiner Arbeit angezeigt bekommen und dein Browser wird automatisch aktualisiert, wenn du √Ñnderungen vornimmst.

F√ºhre in deinem Projektverzeichnis den folgenden Befehl aus, um den Entwicklungsserver zu starten:

<Tabs syncKey="pkg">
<TabItem label="npm">

```sh
npm run dev
```

</TabItem>
<TabItem label="pnpm">

```sh
pnpm dev
```

</TabItem>
<TabItem label="Yarn">

```sh
yarn dev
```

</TabItem>
</Tabs>

Daraufhin wird eine Meldung mit der URL deiner lokalen Vorschau in deinem Terminal angezeigt.
√ñffne diese URL, um deine Website zu betrachten.

### Inhalt hinzuf√ºgen

Starlight ist bereit f√ºr dich, neuen Inhalt hinzuzuf√ºgen oder deine vorhandenen Dateien mitzubringen!

F√ºge neue Seiten zu deiner Website hinzu, indem du Markdown-Dateien im Verzeichnis `src/content/docs/` erstellst.

Lies mehr √ºber dateibasiertes Routing und Unterst√ºtzung f√ºr MDX- und Markdoc-Dateien in der Anleitung [‚ÄûSeiten‚Äú](/de/guides/pages/).

### N√§chste Schritte

- **Konfigurieren:** Erfahre mehr √ºber die allgemeinen Optionen in [‚ÄûStarlight anpassen‚Äú](/de/guides/customization/).
- **Navigieren:** Richte dir deine Seitenleiste mit der Anleitung [‚ÄûSeitenleisten-Navigation‚Äú](/de/guides/sidebar/) ein.
- **Komponenten:** Entdecke die eingebauten Karten, Registerkarten und mehr in der Anleitung [‚ÄûKomponenten‚Äú](/de/components/using-components/).
- **Ver√∂ffentlichen:** Ver√∂ffentliche deine Arbeit mit der Anleitung [‚ÄûBereitstellen deiner Website‚Äú](https://docs.astro.build/de/guides/deploy/) in den Astro-Dokumenten.

## Starlight aktualisieren

:::tip[Tipp]
Da es sich bei Starlight um eine Beta-Software handelt, wird es regelm√§√üig Updates und Verbesserungen geben. Achte darauf Starlight regelm√§√üig zu aktualisieren!
:::

Starlight ist eine Astro-Integration. Dieses und andere Astro-Pakete kannst du aktualisieren, indem du den folgenden Befehl in deinem Terminal ausf√ºhrst:

<Tabs syncKey="pkg">
<TabItem label="npm">

```sh
npx @astrojs/upgrade
```

</TabItem>
<TabItem label="pnpm">

```sh
pnpm dlx @astrojs/upgrade
```

</TabItem>
<TabItem label="Yarn">

```sh
yarn dlx @astrojs/upgrade
```

</TabItem>
</Tabs>

Eine vollst√§ndige Liste der √Ñnderungen findest du im [Starlight Changelog](https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md).

## Fehlerbehebung Starlight

Benutze die Referenzseiten [Projektkonfiguration](/de/reference/configuration/) und [Individuelle Seitenfrontmatter-Konfiguration](/de/reference/frontmatter/), um sicherzustellen, dass deine Starlight-Site richtig konfiguriert ist und funktioniert.
In den Anleitungen in der Seitenleiste findest du Hilfe beim Hinzuf√ºgen von Inhalten und Anpassen deiner Starlight-Site.

Wenn du deine Antwort nicht in diesen Dokumenten finden kannst, besuche bitte die [Astro-Dokumentation](https://docs.astro.build) f√ºr eine vollst√§ndige Dokumentation des darunterliegenden Frameworks.
Deine Frage l√§sst sich vielleicht beantworten, wenn du verstehst, wie Astro im Allgemeinen funktioniert, da Astro das Framework ist, auf dem Starlight basiert.

Du kannst auch nach bekannten [Starlight-Problemen auf GitHub](https://github.com/withastro/starlight/issues) suchen und im [Astro Discord](https://astro.build/chat/) Hilfe von unserer aktiven, freundlichen Community erhalten! Poste Fragen in unserem `#support` Forum mit dem ‚Äûstarlight‚Äú Tag, oder besuche unseren speziellen `#starlight` Kanal, um √ºber die aktuelle Entwicklung und mehr zu diskutieren!


 This is the content for the doc docs/src/content/docs/de/guides/authoring-content.mdx 

 ---
title: Inhalte in Markdown verfassen
description: Ein √úberblick √ºber die von Starlight unterst√ºtzte Markdown-Syntax.
---

Starlight unterst√ºtzt die gesamte Bandbreite der [Markdown](https://daringfireball.net/projects/markdown/) Syntax in `.md` Dateien sowie Frontmatter [YAML](https://dev.to/paulasantamaria/introduction-to-yaml-125f) um Metadaten wie Titel und Beschreibung zu definieren.

Bitte pr√ºfe die [MDX docs](https://mdxjs.com/docs/what-is-mdx/#markdown) oder [Markdoc docs](https://markdoc.dev/docs/syntax), wenn du diese Dateiformate verwendest, da die Unterst√ºtzung und Verwendung von Markdown unterschiedlich sein kann.

## Frontmatter

Du kannst einzelne Seiten in Starlight anpassen, indem du Werte in deinen Frontmatter festlegst.
Frontmatter wird oben in deinen Dateien zwischen `---`-Trennzeichen festgelegt:

```md title="src/content/docs/example.md"
---
title: Mein Seitentitel
---

Nach dem zweiten `---` folgt der Seiteninhalt.
```

Jede Seite muss mindestens einen `title` enthalten.
Alle verf√ºgbaren Felder und Informationen zum Hinzuf√ºgen benutzerdefinierter Felder findst du in der [Frontmatter-Referenz](/de/reference/frontmatter/).

## Inline-Stile

Text kann **fett**, _italic_, oder ~~durchgestrichen~~ sein.

```md
Text kann **fett**, _italic_, oder ~~durchgestrichen~~ sein.
```

Du kannst [auf eine andere Seite](/de/getting-started/) verlinken.

```md
Du kannst [auf eine andere Seite](/de/getting-started/) verlinken.
```

Du kannst `inline code` mit Backticks hervorheben.

```md
Du kannst `inline code` mit Backticks hervorheben.
```

## Bilder

Bilder in Starlight verwenden [Astros eingebaute optimierte Asset-Unterst√ºtzung](https://docs.astro.build/de/guides/images/).

Markdown und MDX unterst√ºtzen die Markdown-Syntax f√ºr die Anzeige von Bildern, einschlie√ülich Alt-Text f√ºr Bildschirmleser und unterst√ºtzende Technologien.

![Eine Illustration von Planeten und Sternen mit dem Wort "Astro"](https://raw.githubusercontent.com/withastro/docs/main/public/default-og-image.png)

```md
![Eine Illustration von Planeten und Sternen mit dem Wort "astro"](https://raw.githubusercontent.com/withastro/docs/main/public/default-og-imag)
```

Relative Bildpfade werden auch f√ºr lokal in Ihrem Projekt gespeicherte Bilder unterst√ºtzt.

```md
// src/content/docs/page-1.md

![Ein Raketenschiff im Weltraum](../../assets/images/rocket.svg)
```

## √úberschriften

Mit einer √úberschrift kannst du den Inhalt strukturieren. √úberschriften in Markdown werden durch eine Reihe von `#` am Anfang der Zeile gekennzeichnet.

### Wie du Seiteninhalte in Starlight strukturierst

Starlight ist so konfiguriert, dass es automatisch den Seitentitel als √úberschrift verwendet und eine "√úbersicht"-√úberschrift an den Anfang des Inhaltsverzeichnisses jeder Seite setzt. Wir empfehlen, jede Seite mit normalem Text zu beginnen und die Seiten√ºberschriften ab `<h2>` zu verwenden:

```md
---
title: Markdown Anleitung
description: Wie man Markdown in Starlight benutzt
---

Diese Seite beschreibt, wie man Markdown in Starlight benutzt.

## Inline-Stile

## √úberschriften
```

### Automatische √úberschriften-Ankerlinks

Wenn du √úberschriften in Markdown verwendst, erhaltst du automatisch Ankerlinks, so dass du direkt auf bestimmte Abschnitte deiner Seite verlinken kannst:

```md
---
title: Meine Seite mit Inhalt
description: Wie man Starlights eingebaute Ankerlinks benutzt
---

## Einleitung

Ich kann auf [meine Schlussfolgerung](#schlussfolgerung) weiter unten auf derselben Seite verlinken.

## Schlussfolgerung

`https://meine-site.com/seite1/#einleitung` navigiert direkt zu meiner Einleitung.
```

√úberschriften der Ebene 2 (`<h2>`) und der Ebene 3 (`<h3>`) werden automatisch im Inhaltsverzeichnis der Seite angezeigt.

Erfahre mehr dar√ºber, wie Astro Kopfzeilen-IDs verarbeitet, in [der Astro-Dokumentation](https://docs.astro.build/de/guides/markdown-content/#%C3%BCberschriften-ids).

## Nebenbemerkungen

Nebenbemerkungen (auch bekannt als "Ermahnungen" oder "Callouts") sind n√ºtzlich, um sekund√§re Informationen neben dem Hauptinhalt einer Seite anzuzeigen.

Starlight bietet eine eigene Markdown-Syntax f√ºr die Darstellung von Nebeninformationen. Seitenbl√∂cke werden mit einem Paar dreifacher Doppelpunkte `:::` angezeigt, um den Inhalt zu umschlie√üen, und k√∂nnen vom Typ `note`, `tip`, `caution` oder `danger` sein.

Sie k√∂nnen alle anderen Markdown-Inhaltstypen innerhalb einer Nebenbemerkung verschachteln, allerdings eignen sich diese am besten f√ºr kurze und pr√§gnante Inhaltsst√ºcke.

### Nebenbemerkung `note`

:::note
Starlight ist ein Toolkit f√ºr Dokumentations-Websites, das mit [Astro](https://astro.build/de) erstellt wurde. Du kannst mit diesem Befehl beginnen:

```sh
npm create astro@latest -- --template starlight
```

:::

````md
:::note
Starlight ist ein Toolkit f√ºr Dokumentations-Websites, das mit [Astro](https://astro.build/de) erstellt wurde. Du kannst mit diesem Befehl beginnen:

```sh
npm create astro@latest -- --template starlight
```

:::
````

### Benutzerdefinierte Nebenbemerkungstitel

Du kannst einen benutzerdefinierten Titel f√ºr die Nebenbemerkung in eckigen Klammern nach dem Typen angeben, z.B. `:::tip[Wusstest du schon?]`.

:::tip[Wusstest du schon?]
Astro hilft dir, schnellere Websites mit ["Islands Architecture"](https://docs.astro.build/de/concepts/islands/) zu erstellen.
:::

```md
:::tip[Wusstest du schon?]
Astro hilft dir, schnellere Websites mit ["Islands Architecture"](https://docs.astro.build/de/concepts/islands/) zu erstellen.
:::
```

### Weitere Typen

Vorsichts- und Gefahrenhinweise sind hilfreich, um die Aufmerksamkeit des Benutzers auf Details zu lenken, √ºber die er stolpern k√∂nnte.
Wenn du diese h√§ufig verwenden, kann das auch ein Zeichen daf√ºr sein, dass die Sache, die Sie dokumentieren, von einem neuen Design profitieren k√∂nnte.

:::caution
Wenn du nicht sicher bist, ob du eine gro√üartige Dokumentseite willst, √ºberlege es dir zweimal, bevor du [Starlight](/de/) verwendest.
:::

:::danger
Deine Benutzer k√∂nnen dank hilfreicher Starlight-Funktionen produktiver sein und dein Produkt einfacher nutzen.

- √úbersichtliche Navigation
- Benutzer-konfigurierbares Farbthema
- [i18n-Unterst√ºtzung](/de/guides/i18n/)

:::

```md
:::caution
Wenn du nicht sicher bist, ob du eine gro√üartige Dokumentseite willst, √ºberlege es dir zweimal, bevor du [Starlight](/de/) verwendest.
:::

:::danger
Deine Benutzer k√∂nnen dank hilfreicher Starlight-Funktionen produktiver sein und dein Produkt einfacher nutzen.

- √úbersichtliche Navigation
- Benutzer-konfigurierbares Farbthema
- [i18n-Unterst√ºtzung](/de/guides/i18n/)

:::
```

## Blockzitate

> Dies ist ein Blockzitat, das √ºblicherweise verwendet wird, wenn eine andere Person oder ein Dokument zitiert wird.
>
> Blockzitate werden durch ein ">" am Anfang jeder Zeile gekennzeichnet.

```md
> Dies ist ein Blockzitat, das √ºblicherweise verwendet wird, wenn eine andere Person oder ein Dokument zitiert wird.
>
> Blockzitate werden durch ein ">" am Anfang jeder Zeile gekennzeichnet.
```

## Codebl√∂cke

Ein Codeblock wird durch einen Block mit drei Backticks <code>```</code> am Anfang und Ende gekennzeichnet. Du kannst die verwendete Programmiersprache nach den ersten drei Backticks angeben.

```js
// Javascript-Code mit Syntaxhervorhebung.
var fun = function lang(l) {
	dateformat.i18n = require('./lang/' + l);
	return true;
};
```

````md
```js
// Javascript-Code mit Syntaxhervorhebung.
var fun = function lang(l) {
	dateformat.i18n = require('./lang/' + l);
	return true;
};
```
````

### Expressive Code-Merkmale

Starlight verwendet [Expressive Code](https://github.com/expressive-code/expressive-code/tree/main/packages/astro-expressive-code), um die Formatierungsm√∂glichkeiten f√ºr Codebl√∂cke zu erweitern.
Die Textmarker und Fensterrahmen-Plugins von Expressive Code sind standardm√§√üig aktiviert.
Die Darstellung von Codebl√∂cken kann mit Starlights [`expressiveCode` Konfigurationsoption](/de/reference/configuration/#expressivecode) konfiguriert werden.

#### Textmarkierungen

Du kannst bestimmte Zeilen oder Teile deiner Codebl√∂cke hervorheben, indem du [Expressive Code Textmarkierungen](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md#usage-in-markdown--mdx-documents) in der ersten Zeile deines Codeblocks verwendest.
Verwende geschweifte Klammern (`{ }`), um ganze Zeilen hervorzuheben, und Anf√ºhrungszeichen, um Textabschnitte zu markieren.

Es gibt drei Hervorhebungsstile: neutral, um auf den Code aufmerksam zu machen, gr√ºn, um eingef√ºgten Code zu kennzeichnen, und rot, um gel√∂schten Code zu kennzeichnen.
Sowohl Text als auch ganze Zeilen k√∂nnen mit der Standardmarkierung oder in Kombination mit `ins=` und `del=` markiert werden, um die gew√ºnschte Hervorhebung zu erzielen.

Expressive Code bietet mehrere Optionen zur Anpassung des visuellen Erscheinungsbildes deiner Codebeispiele.
Viele dieser Optionen k√∂nnen kombiniert werden, um sehr anschauliche Codebeispiele zu erstellen.
Bitte schaue dir die [Expressive Code Dokumentation](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md) an, um dich √ºber die umfangreichen Optionen zu informieren.
Einige der gebr√§uchlichsten Beispiele sind unten aufgef√ºhrt:

- [Markiere ganze Zeilen und Zeilenbereiche mit dem Marker `{ }`](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md#marking-entire-lines--line-ranges):

  ```js {2-3}
  function demo() {
  	// Diese Zeile (#2) und die n√§chste Zeile sind hervorgehoben
  	return 'This is line #3 of this snippet';
  }
  ```

  ````md
  ```js {2-3}
  function demo() {
  	// Diese Zeile (#2) und die n√§chste Zeile sind hervorgehoben
  	return 'This is line #3 of this snippet';
  }
  ```
  ````

- [Markieren von Textabschnitten mit der Markierung `" "` oder regul√§ren Ausdr√ºcken](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md#marking-individual-text-inside-lines):

  ```js "einzelne Begriffe" /Auch.*unterst√ºtzt/
  // Auch einzelne Begriffe k√∂nnen hervorgehoben werden
  function demo() {
  	return 'Auch regul√§re Ausdr√ºcke werden unterst√ºtzt';
  }
  ```

  ````md
  ```js "einzelne Begriffe" /Auch.*unterst√ºtzt/
  // Auch einzelne Begriffe k√∂nnen hervorgehoben werden
  function demo() {
  	return 'Auch regul√§re Ausdr√ºcke werden unterst√ºtzt';
  }
  ```
  ````

- [Text oder Zeilen mit `ins` oder `del` als eingef√ºgt oder gel√∂scht markieren](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md#selecting-marker-types-mark-ins-del):

  ```js "return true;" ins="eingef√ºgte" del="gel√∂schte"
  function demo() {
  	console.log('Dies sind eingef√ºgte und gel√∂schte Markertypen');
  	// Die return-Anweisung verwendet den Standard-Markierungstyp
  	return true;
  }
  ```

  ````md
  ```js "return true;" ins="eingef√ºgte" del="gel√∂schte"
  function demo() {
  	console.log('Dies sind eingef√ºgte und gel√∂schte Markertypen');
  	// Die return-Anweisung verwendet den Standard-Markierungstyp
  	return true;
  }
  ```
  ````

- [Kombinieren Sie die Syntaxhervorhebung mit einer `diff`-√§hnlichen Syntax](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-text-markers/README.md#combining-syntax-highlighting-with-diff-like-syntax):

  ```diff lang="js"
    function thisIsJavaScript() {
      // Dieser gesamte Block wird als JavaScript hervorgehoben,
      // und wir k√∂nnen ihm immer noch Diff-Markierungen hinzuf√ºgen!
  -   console.log('Zu entfernender alter Code')
  +   console.log('Neuer, gl√§nzender Code!')
    }
  ```

  ````md
  ```diff lang="js"
    function thisIsJavaScript() {
      // Dieser gesamte Block wird als JavaScript hervorgehoben,
      // und wir k√∂nnen ihm immer noch Diff-Markierungen hinzuf√ºgen!
  -   console.log('Zu entfernender alter Code')
  +   console.log('Neuer, gl√§nzender Code!')
    }
  ```
  ````

#### Rahmen und √úberschriften

Codebl√∂cke k√∂nnen innerhalb eines fenster√§hnlichen Rahmens dargestellt werden.
Ein Rahmen, der wie ein Terminalfenster aussieht, wird f√ºr Shell-Skriptsprachen (z.B. `bash` oder `sh`) verwendet.
Andere Sprachen werden in einem Rahmen im Stil eines Code-Editors angezeigt, wenn sie einen Titel enthalten.

Der optionale Titel eines Code-Blocks kann entweder mit einem `title="..."`-Attribut gesetzt werden, das den √∂ffnenden Backticks und dem Sprachbezeichner des Code-Blocks folgt, oder mit einem Dateinamenkommentar in den ersten Zeilen des Codes.

- [Hinzuf√ºgen einer Registerkarte f√ºr den Dateinamen mit einem Kommentar](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-frames/README.md#adding-titles-open-file-tab-or-terminal-window-title)

  ```js
  // meine-test-datei.js
  console.log('Hallo Welt!');
  ```

  ````md
  ```js
  // meine-test-datei.js
  console.log('Hallo Welt!');
  ```
  ````

- [Hinzuf√ºgen eines Titels zu einem Terminalfenster](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-frames/README.md#adding-titles-open-file-tab-or-terminal-window-title)

  ```bash title="Installieren von Abh√§ngigkeiten‚Ä¶"
  npm install
  ```

  ````md
  ```bash title="Installieren von Abh√§ngigkeiten‚Ä¶"
  npm install
  ```
  ````

- [Fensterrahmen mit `frame="none"` deaktivieren](https://github.com/expressive-code/expressive-code/blob/main/packages/%40expressive-code/plugin-frames/README.md#overriding-frame-types)

  ```bash frame="none"
  echo "Dies wird trotz Verwendung der Bash-Sprache nicht als Terminal dargestellt"
  ```

  ````md
  ```bash frame="none"
  echo "Dies wird trotz Verwendung der Bash-Sprache nicht als Terminal dargestellt"
  ```
  ````

## Details

Details (auch bekannt als ‚ÄûOffenlegungen‚Äú oder ‚ÄûAkkordeons‚Äú) sind n√ºtzlich, um Inhalte zu verbergen, die nicht unmittelbar relevant sind.
Die Nutzer k√∂nnen auf eine kurze Zusammenfassung klicken, um den gesamten Inhalt zu sehen.

Verwende die Standard-HTML-Elemente [`<details>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details) und [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary) in deinem Markdown-Inhalt, um ein Offenlegungs-Widget zu erstellen.

Du kannst jede andere Markdown-Syntax innerhalb eines `<Details>`-Elements verschachteln.

<details>
<summary>Wo und wann ist das Sternbild Andromeda am besten zu sehen?</summary>

Das Sternbild [Andromeda](<https://de.wikipedia.org/wiki/Andromeda_(Sternbild)>) ist am Nachthimmel im Monat November in Breitengraden zwischen `+90¬∞` und `‚àí40¬∞` am besten sichtbar.

</details>

```md
<details>
<summary>Wo und wann ist das Sternbild Andromeda am besten zu sehen?</summary>

Das Sternbild [Andromeda](<https://de.wikipedia.org/wiki/Andromeda_(Sternbild)>) ist am Nachthimmel im Monat November in Breitengraden zwischen `+90¬∞` und `‚àí40¬∞` am besten sichtbar.

</details>
```

## Andere allgemeine Markdown-Funktionen

Starlight unterst√ºtzt alle anderen Markdown-Autorensyntaxen, wie Listen und Tabellen. Einen schnellen √úberblick √ºber alle Markdown-Syntaxelemente findest du im [Markdown Cheat Sheet von The Markdown Guide](https://www.markdownguide.org/cheat-sheet/).

## Erweiterte Markdown- und MDX-Konfiguration

Starlight verwendet Astros Markdown- und MDX-Renderer, der auf remark und rehype aufbaut. Du kannst eine Unterst√ºtzung f√ºr eigene Syntax und Verhalten hinzuf√ºgen, indem du `remarkPlugins` oder `rehypePlugins` in deiner Astro-Konfigurationsdatei hinzuf√ºgst. Weitere Informationen findest du unter ["Markdown konfigurieren"](https://docs.astro.build/de/guides/markdown-content/#markdown-plugins) in der Astro-Dokumentation.

## Markdoc

Starlight unterst√ºtzt die Erstellung von Inhalten in Markdoc mithilfe der experimentellen [Astro Markdoc-Integration](https://docs.astro.build/de/guides/integrations-guide/markdoc/) und der Starlight Markdoc-Voreinstellung.

### Erstelle ein neues Projekt mit Markdoc

Starte ein neues Starlight-Projekt mit vorkonfiguriertem Markdoc mit `create astro`:

import { Tabs, TabItem, Steps } from '@astrojs/starlight/components';

<Tabs syncKey="pkg">
<TabItem label="npm">

```sh
npm create astro@latest -- --template starlight/markdoc
```

</TabItem>
<TabItem label="pnpm">

```sh
pnpm create astro --template starlight/markdoc
```

</TabItem>
<TabItem label="Yarn">

```sh
yarn create astro --template starlight/markdoc
```

</TabItem>
</Tabs>

### Markdoc zu einem bestehenden Projekt hinzuf√ºgen

Wenn du bereits eine Starlight-Site hast und Markdoc hinzuf√ºgen m√∂chtest, befolge diese Schritte.

<Steps>

1.  F√ºge Astros Markdoc-Integration hinzu:

    <Tabs syncKey="pkg">

    <TabItem label="npm">

    ```sh
    npx astro add markdoc
    ```

    </TabItem>

    <TabItem label="pnpm">

    ```sh
    pnpm astro add markdoc
    ```

    </TabItem>

    <TabItem label="Yarn">

    ```sh
    yarn astro add markdoc
    ```

    </TabItem>

    </Tabs>

2.  Installiere die Starlight Markdoc-Voreinstellung:

    <Tabs syncKey="pkg">

    <TabItem label="npm">

    ```sh
    npm install @astrojs/starlight-markdoc
    ```

    </TabItem>

    <TabItem label="pnpm">

    ```sh
    pnpm add @astrojs/starlight-markdoc
    ```

    </TabItem>

    <TabItem label="Yarn">

    ```sh
    yarn add @astrojs/starlight-markdoc
    ```

    </TabItem>

    </Tabs>

3.  Erstelle eine Markdoc-Konfigurationsdatei unter `markdoc.config.mjs` und verwende die Starlight Markdoc-Voreinstellung:

    ```js
    import { defineMarkdocConfig } from '@astrojs/markdoc/config';
    import starlightMarkdoc from '@astrojs/starlight-markdoc';

    export default defineMarkdocConfig({
    	extends: [starlightMarkdoc()],
    });
    ```

</Steps>

Weitere Informationen zur Syntax und den Funktionen von Markdoc findest du in der [Markdoc-Dokumentation](https://markdoc.dev/docs/syntax) oder im [Astro Markdoc-Integrationshandbuch](https://docs.astro.build/de/guides/integrations-guide/markdoc/).


 This is the content for the doc docs/src/content/docs/de/guides/css-and-tailwind.mdx 

 ---
title: CSS & Styling
description: Lerne, wie du deine Starlight-Seite mit benutzerdefiniertem CSS gestalten oder mit Tailwind CSS integrieren kannst.
---

import { Tabs, TabItem, Steps } from '@astrojs/starlight/components';

Du kannst deine Starlight-Website mit benutzerdefinierten CSS-Dateien gestalten oder das Starlight Tailwind-Plugin verwenden.

## Benutzerdefinierte CSS-Styles (Stile)

Passe die Styles deiner Starlight-Seite an, indem du zus√§tzliche CSS-Dateien bereitstellst, um die Standard-Styles von Starlight zu ver√§ndern oder zu erweitern.

<Steps>

1. F√ºge eine CSS-Datei zu deinem `src/`-Verzeichnis hinzu.
   Du kannst zum Beispiel eine gr√∂√üere Standard-Spaltenbreite und eine gr√∂√üere Textgr√∂√üe f√ºr den Seitentitel festlegen:

   ```css
   /* src/styles/custom.css */
   :root {
   	--sl-content-width: 50rem;
   	--sl-text-5xl: 3.5rem;
   }
   ```

2. F√ºge den Pfad zu deiner CSS-Datei in Starlights `customCss`- Array in `astro.config.mjs` ein:

   ```diff lang="js"
   // astro.config.mjs
   import { defineConfig } from 'astro/config';
   import starlight from '@astrojs/starlight';

   export default defineConfig({
   	integrations: [
   		starlight({
   			title: 'Dokumentation mit benutzerdefiniertem CSS',
   			customCss: [
   +				// Relativer Pfad zu deiner benutzerdefinierten CSS-Datei
   +				'./src/styles/custom.css',
   			],
   		}),
   	],
   });
   ```

</Steps>

Du kannst dir alle CSS-Eigenschaften, die von Starlight verwendet werden und die du einstellen kannst, um deine Seite anzupassen, in der [Datei `props.css` auf GitHub](https://github.com/withastro/starlight/blob/main/packages/starlight/style/props.css) ansehen.

## Tailwind CSS

Tailwind CSS-Unterst√ºtzung in Astro-Projekten wird durch die [Astro Tailwind-Integration](https://docs.astro.build/de/guides/integrations-guide/tailwind/) bereitgestellt.
Starlight bietet ein komplement√§res Tailwind-Plugin, um Tailwind f√ºr die Kompatibilit√§t mit den Styles von Starlight zu konfigurieren.

Das Starlight Tailwind-Plugin wendet die folgende Konfiguration an:

- Konfiguriert Tailwinds `dark:`-Varianten so, dass sie mit Starlights Dark Mode funktionieren.
- Verwendet Tailwind [Themenfarben und Schriftarten](#starlight-mit-tailwind-designen) in Starlights UI.
- Deaktiviert Tailwinds [Preflight](https://tailwindcss.com/docs/preflight) Zur√ºcksetzungs-Style, w√§hrend selektiv wesentliche Teile von Preflight wiederhergestellt werden, die f√ºr die border-Klassen von Tailwind ben√∂tigt werden.

### Erstelle ein neues Projekt mit Tailwind

Starte ein neues Starlight-Projekt mit Tailwind CSS vorkonfiguriert, indem du `create astro` verwendest:

<Tabs syncKey="pkg">
<TabItem label="npm">

```sh
npm create astro@latest -- --template starlight/tailwind
```

</TabItem>
<TabItem label="pnpm">

```sh
pnpm create astro --template starlight/tailwind
```

</TabItem>
<TabItem label="Yarn">

```sh
yarn create astro --template starlight/tailwind
```

</TabItem>
</Tabs>

### Tailwind zu einem bestehenden Projekt hinzuf√ºgen

Wenn du bereits eine Starlight-Website hast und Tailwind CSS hinzuf√ºgen m√∂chtest, folge dieser Anleitung.

<Steps>

1.  F√ºge die Tailwind-Integration von Astro hinzu:

    <Tabs syncKey="pkg">

    <TabItem label="npm">

    ```sh
    npx astro add tailwind
    ```

    </TabItem>

    <TabItem label="pnpm">

    ```sh
    pnpm astro add tailwind
    ```

    </TabItem>

    <TabItem label="Yarn">

    ```sh
    yarn astro add tailwind
    ```

    </TabItem>

    </Tabs>

2.  Installiere das Starlight Tailwind-Plugin:

    <Tabs syncKey="pkg">

    <TabItem label="npm">

    ```sh
    npm install @astrojs/starlight-tailwind
    ```

    </TabItem>

    <TabItem label="pnpm">

    ```sh
    pnpm add @astrojs/starlight-tailwind
    ```

    </TabItem>

    <TabItem label="Yarn">

    ```sh
    yarn add @astrojs/starlight-tailwind
    ```

    </TabItem>

    </Tabs>

3.  Erstelle eine CSS-Datei f√ºr die grundlegenden Styles von Tailwind, zum Beispiel unter `src/tailwind.css`:

    ```css
    /* src/tailwind.css */
    @tailwind base;
    @tailwind components;
    @tailwind utilities;
    ```

4.  Aktualisiere deine Astro-Konfigurationsdatei, um deine Tailwind-Styles zu verwenden und deaktiviere die Standard-Styles:

    ```js {11-12,16-17}
    // astro.config.mjs
    import { defineConfig } from 'astro/config';
    import starlight from '@astrojs/starlight';
    import tailwind from '@astrojs/tailwind';

    export default defineConfig({
    	integrations: [
    		starlight({
    			title: 'Dokumentation mit Tailwind',
    			customCss: [
    				// Pfad zu deinen grundlegenden Tailwind-Styles
    				'./src/tailwind.css',
    			],
    		}),
    		tailwind({
    			// Deaktiviere die grundlegenden Styles
    			applyBaseStyles: false,
    		}),
    	],
    });
    ```

5.  F√ºge das Starlight Tailwind-Plugin zu `tailwind.config.mjs` hinzu:

    ```js ins={2,7}
    // tailwind.config.mjs
    import starlightPlugin from '@astrojs/starlight-tailwind';

    /** @type {import('tailwindcss').Config} */
    export default {
    	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
    	plugins: [starlightPlugin()],
    };
    ```

</Steps>

### Starlight mit Tailwind designen

Starlight verwendet Werte aus deiner [Tailwind-Theme-Konfiguration](https://tailwindcss.com/docs/theme) in der Benutzeroberfl√§che.

Falls gesetzt, √ºberschreiben die folgenden Optionen die Standard-Styles von Starlight:

- `colors.accent` - wird f√ºr Links und die Hervorhebung des aktuellen Elements verwendet
- `colors.gray` - wird f√ºr Hintergrundfarben und Rahmen verwendet
- `fontFamily.sans` - wird f√ºr UI und Inhaltstext verwendet
- `fontFamily.mono` - wird f√ºr Code-Beispiele verwendet

```js {12,14,18,20}
// tailwind.config.mjs
import starlightPlugin from '@astrojs/starlight-tailwind';
import colors from 'tailwindcss/colors';

/** @type {import('tailwindcss').Config} */
export default {
	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	theme: {
		extend: {
			colors: {
				// Deine bevorzugte Akzentfarbe. Indigo entspricht am ehesten den Standardeinstellungen von Starlight.
				accent: colors.indigo,
				// Deine bevorzugte Grauskala. Zink kommt den Standardeinstellungen von Starlight am n√§chsten.
				grau: colors.zinc,
			},
			fontFamily: {
				// Deine bevorzugte Schriftart. Starlight verwendet standardm√§√üig eine Systemschriftart.
				sans: ['"Atkinson Hyperlegible"'],
				// Deine bevorzugte Code-Schriftart. Starlight verwendet standardm√§√üig die Systemschriftart Monospace.
				mono: ['"IBM Plex Mono"'],
			},
		},
	},
	plugins: [starlightPlugin()],
};
```

## Themes

Das Farbtheme von Starlight kann gesteuert werden, indem die Standardeinstellungen √ºberschrieben werden.
Diese Variablen werden in der gesamten Benutzeroberfl√§che verwendet, wobei eine Reihe von Graut√∂nen f√ºr Text- und Hintergrundfarben sowie eine Akzentfarbe f√ºr Links und zur Hervorhebung aktueller Elemente in der Navigation verwendet werden.

### Farbdesign-Editor

Verwende die Schieberegler unten, um die Akzent- und Graufarbpalette von Starlight zu √§ndern.
Die dunklen und hellen Vorschaubereiche zeigen die resultierenden Farben, und die gesamte Seite wird ebenfalls aktualisiert, um deine √Ñnderungen anzuzeigen.

Verwende die Option Kontraststufe, um festzulegen, welche der Richtlinie f√ºr die Zug√§nglichkeit von Webinhalten [Farbkontraststandards](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast) erf√ºllt werden soll.

Wenn du mit deinen √Ñnderungen zufrieden bist, kopiere den CSS- oder Tailwind-Code unten und verwende ihn in deinem Projekt.

import ThemeDesigner from '~/components/theme-designer.astro';

<ThemeDesigner
	labels={{
		presets: {
			label: 'Voreinstellungen',
			ocean: 'Ozean',
			forest: 'Wald',
			oxide: 'Oxid',
			nebula: 'Nebel',
			default: 'Standard',
			random: 'Zuf√§llig',
		},
		contrast: {
			label: 'Kontraststufe',
		},
		editor: {
			accentColor: 'Akzent',
			grayColor: 'Grau',
			hue: 'Farbton',
			chroma: 'S√§ttigung',
			pickColor: 'W√§hle Farbe',
		},
		preview: {
			darkMode: 'Dark mode',
			lightMode: 'Light mode',
			bodyText:
				'Der Flie√ütext wird in einem Grauton mit hohem Kontrast zum Hintergrund dargestellt.',
			linkText: 'Links sind farbig.',
			dimText:
				'Einige Texte, wie z. B. das Inhaltsverzeichnis, haben einen geringeren Kontrast.',
			inlineCode: 'Inline-Code hat einen eindeutigen Hintergrund.',
		},
	}}
>
	<Fragment slot="css-docs">
		F√ºge das folgende CSS in deinem Projekt in eine [benutzerdefinierte
		CSS-Datei](#benutzerdefinierte-css-styles-stile) ein, um dieses Theme auf
		deiner Website anzuwenden.
	</Fragment>
	<Fragment slot="tailwind-docs">
		Das folgende Beispiel
		[Tailwind-Konfigurationsdatei](#starlight-mit-tailwind-designen) enth√§lt
		generierte `accent` und `gray` Farbpaletten, welche du im
		Konfigurationsobjekt `theme.extend.colors` verwenden kannst.
	</Fragment>
</ThemeDesigner>


 This is the content for the doc docs/src/content/docs/de/guides/customization.mdx 

 ---
title: Starlight anpassen
description: Lerne, wie du deine Starlight-Site mit deinem Logo, eigenen Schriftarten, Landing-Page-Design und vielem mehr zu deiner eigenen machen kannst.
---

import { Tabs, TabItem, FileTree, Steps } from '@astrojs/starlight/components';

Starlight bietet sinnvolle Standard-Styling und -Funktionen, so dass du schnell loslegen kannst, ohne dass eine Konfiguration erforderlich ist.
Wenn du das Aussehen deiner Starlight-Website anpassen willst, findest du in dieser Anleitung alle n√∂tigen Informationen.

## Dein Logo hinzuf√ºgen

Das Hinzuf√ºgen eines eigenen Logos im Header ist ein schneller Weg, um einer Starlight-Website dein individuelles Branding zu geben.

<Steps>

1. F√ºge deine Logodatei in das Verzeichnis `src/assets/` ein:

   <FileTree>

   - src/
     - assets/
       - **mein-logo.svg**
     - content/
   - astro.config.mjs

   </FileTree>

2. F√ºge den Pfad zu deinem Logo als Starlights [`logo.src`](/de/reference/configuration/#logo) Option in `astro.config.mjs` ein:

   ```diff lang="js"
   // astro.config.mjs
   import { defineConfig } from 'astro/config';
   import starlight from '@astrojs/starlight';

   export default defineConfig({
   	integrations: [
   		starlight({
   			title: 'Dokumentation mit meinem Logo',
   			logo: {
   +				src: './src/assets/mein-logo.svg',
   			},
   		}),
   	],
   });
   ```

</Steps>

Standardm√§√üig wird das Logo neben dem `title` deiner Website angezeigt.
Wenn dein Logobild bereits den Titel der Website enth√§lt, kannst du den Titeltext optisch ausblenden, indem du die Option `replacesTitle` setzt.
Der `title`-Text wird f√ºr Bildschirmleser weiterhin angezeigt, so dass die Kopfzeile zug√§nglich bleibt.

```js {5}
starlight({
  title: 'Dokumentation mit meinem Logo',
  logo: {
    src: './src/assets/mein-logo.svg',
    replacesTitle: true,
  },
}),
```

### Light- und Dark-Mode Logovarianten

Du kannst verschiedene Versionen deines Logos im Light- und Dark-Mode anzeigen.

<Steps>

1. F√ºge eine Bilddatei f√ºr jede Variante zu `src/assets/` hinzu:

   <FileTree>

   - src/
     - assets/
       - **light-logo.svg**
       - **dark-logo.svg**
     - content/
   - astro.config.mjs

   </FileTree>

2. F√ºge den Pfad zu deiner Logovarianten als die Optionen `light` und `dark` anstelle von `src` in `astro.config.mjs` ein:

   ```diff lang="js"
   starlight({
     title: 'Dokumentation mit meinem Logo',
     logo: {
   +    light: './src/assets/light-logo.svg',
   +    dark: './src/assets/dark-logo.svg',
     },
   }),
   ```

</Steps>

## Sitemap aktivieren

Starlight hat eine eingebaute Unterst√ºtzung f√ºr die Erstellung einer Sitemap. Aktiviere die Sitemap-Generierung, indem du deine URL als `site` in `astro.config.mjs` angibst:

```js {4}
// astro.config.mjs

export default defineConfig({
	site: 'https://stargazers.club',
	integrations: [starlight({ title: 'Website mit Sitemap' })],
});
```

Erfahre in den Astro Docs, wie du [einen Sitemap-Link zur `robots.txt` hinzuf√ºgst] (https://docs.astro.build/de/guides/integrations-guide/sitemap/#sitemap-link-in-robotstxt).

## Seitenlayout

Starlight-Seiten verwenden standardm√§√üig ein Layout mit einer globalen Navigation und einem Inhaltsverzeichnis, das die aktuellen Seiten√ºberschriften anzeigt.

Du kannst ein breiteres Seitenlayout ohne Navigationen verwenden, indem du [`template: splash`](/de/reference/frontmatter/#template) im Frontmatter einer Seite setzt.
Dies funktioniert besonders gut f√ºr Landingpages, und du kannst es in Aktion auf der [Homepage dieser Website](/de/) sehen.

```md {5}
---
# src/content/docs/index.md

title: Meine Landing Page
template: splash
---
```

## Inhaltsverzeichnis

Starlight zeigt auf jeder Seite ein Inhaltsverzeichnis an, um es den Lesern zu erleichtern, zu der gesuchten √úberschrift zu springen.
Du kannst das Inhaltsverzeichnis global in der Starlight-Integration oder seitenweise im Frontmatter anpassen - oder sogar deaktivieren.

Standardm√§√üig werden die √úberschriften `<h2>` und `<h3>` in das Inhaltsverzeichnis aufgenommen. √Ñndere die √úberschriftsebenen f√ºr die gesamte Website mit den Optionen `minHeadingLevel` und `maxHeadingLevel` in deinem [globalen `tableOfContents`](/de/reference/configuration/#tableofcontents). √úberschreibe diese Standardwerte auf einer individuellen Seite, indem du die entsprechenden [Frontmatter `tableOfContents`](/de/reference/frontmatter/#tableofcontents) Eigenschaften hinzuf√ºgst:

<Tabs syncKey="config-type">
  <TabItem label="Frontmatter">

```md {4-6}
---
# src/content/docs/example.md
title: Seite mit nur H2s im Inhaltsverzeichnis
tableOfContents:
  minHeadingLevel: 2
  maxHeadingLevel: 2
---
```

  </TabItem>
  <TabItem label="Globale Konfiguration">

```js {7}
// astro.config.mjs

defineConfig({
	integrations: [
		starlight({
			title: 'Dokumentation mit benutzerdefinierten Inhaltsverzeichnissen',
			tableOfContents: { minHeadingLevel: 2, maxHeadingLevel: 2 },
		}),
	],
});
```

  </TabItem>
</Tabs>

Deaktiviere das Inhaltsverzeichnis vollst√§ndig, indem du die Option `tableOfContents` auf `false` setzt:

<Tabs syncKey="config-type">
  <TabItem label="Frontmatter">

```md {4}
---
# src/content/docs/example.md
title: Seite ohne Inhaltsverzeichnis
tableOfContents: false
---
```

  </TabItem>
  <TabItem label="Globale Konfiguration">

```js {7}
// astro.config.mjs

defineConfig({
	integrations: [
		starlight({
			title: 'Dokumentation mit global deaktiviertem Inhaltsverzeichnis',
			tableOfContents: false,
		}),
	],
});
```

  </TabItem>
</Tabs>

## Social Links

Starlight bietet integrierte Unterst√ºtzung f√ºr das Hinzuf√ºgen von Links zu deinen Social-Media-Accounts in der Kopfzeile der Website √ºber die Option [`social`](/de/reference/configuration/#social) in der Starlight-Integration.

Eine vollst√§ndige Liste der unterst√ºtzten Dienste findest du in der [Konfigurationsreferenz](/de/reference/configuration/#social).
Lasse uns auf GitHub oder Discord wissen, wenn du Unterst√ºtzung f√ºr einen anderen Dienst ben√∂tigst!

```js {9-12}
// astro.config.mjs
import { defineConfig } from 'astro/config';
import starlight from '@astrojs/starlight';

export default defineConfig({
	integrations: [
		starlight({
			title: 'Dokumentation mit social Links',
			social: {
				discord: 'https://astro.build/chat',
				github: 'https://github.com/withastro/starlight',
			},
		}),
	],
});
```

## Bearbeitungslinks

Starlight kann einen "Seite bearbeiten"-Link in der Fu√üzeile jeder Seite anzeigen.
Dies macht es dem Leser leicht, die zu bearbeitende Datei zu finden, um deine Dokumentation zu verbessern.
Insbesondere bei Open-Source-Projekten kann dies dazu beitragen, Beitr√§ge aus deiner Community zu f√∂rdern.

Um Edit-Links zu aktivieren, setze [`editLink.baseUrl`](/de/reference/configuration/#editlink) auf die URL, die du zum Bearbeiten deines Repositorys in der Starlight-Integrationskonfiguration verwendest.
Der Wert von `editLink.baseUrl` wird dem Pfad zur aktuellen Seite vorangestellt, um den vollst√§ndigen Bearbeitungslink zu bilden.

√úbliche Muster sind:

- GitHub: `https://github.com/BENUTZERNAME/REPOSITORY_NAME/edit/BRANCH_NAME/`
- GitLab: `https://gitlab.com/BENUTZERNAME/REPOSITORY_NAME/-/edit/BRANCH_NAME/`

Wenn sich dein Starlight-Projekt nicht im Stammverzeichnis deines Repositorys befindet, f√ºge den Pfad zum Projekt am Ende der Basis-URL ein.

Dieses Beispiel zeigt den Bearbeitungslink, der f√ºr die Starlight-Dokumente konfiguriert ist, die sich im Unterverzeichnis `docs/` im `main`-Branch des `withastro/starlight`-Repository auf GitHub befinden:

```js {9-11}
// astro.config.mjs
import { defineConfig } from 'astro/config';
import starlight from '@astrojs/starlight';

export default defineConfig({
	integrations: [
		starlight({
			title: 'Dokumentation mit Bearbeitungslinks',
			editLink: {
				baseUrl: 'https://github.com/withastro/starlight/edit/main/docs/',
			},
		}),
	],
});
```

## Benutzerdefinierte 404-Seite

Starlight-Seiten zeigen standardm√§√üig eine einfache 404-Seite an.
Du kannst dies anpassen, indem du eine `404.md` (oder `404.mdx`) Datei zu deinem `src/content/docs/` Verzeichnis hinzuf√ºgst:

<FileTree>

- src/
  - content/
    - docs/
      - **404.md**
      - index.md
- astro.config.mjs

</FileTree>

Du kannst alle Seitenlayout- und Anpassungstechniken von Starlight in deiner 404-Seite verwenden. Zum Beispiel verwendet die Standard 404-Seite die [`splash` Vorlage](#seitenlayout) und [`hero`](/de/reference/frontmatter/#hero) Komponente in Frontmatter:

```md {4,6-8}
---
# src/content/docs/404.md
title: '404'
template: splash
editUrl: false
hero:
  title: '404'
  tagline: Seite nicht gefunden. √úberpr√ºfe die URL oder versuche es mit der Suchfunktion.
---
```

### Deaktivieren der Standard-404-Seite

Wenn dein Projekt ein komplett angepasstes 404-Layout ben√∂tigt, kannst du eine `src/pages/404.astro`-Route erstellen und die [`disable404Route`](/de/reference/configuration/#disable404route) Konfigurationsoption setzen, um die Standard-Route von Starlight zu deaktivieren:

```js {9}
// astro.config.mjs
import { defineConfig } from 'astro/config';
import starlight from '@astrojs/starlight';

export default defineConfig({
	integrations: [
		starlight({
			title: 'Dokumentation mit benutzerdefinierten 404',
			disable404Route: true,
		}),
	],
});
```

## Benutzerdefinierte Schriftarten

Standardm√§√üig verwendet Starlight serifenlose Schriften, die auf dem lokalen Ger√§t des Benutzers verf√ºgbar sind, f√ºr den gesamten Text.
Dadurch wird sichergestellt, dass die Dokumentation schnell in einer Schriftart geladen wird, die jedem Benutzer vertraut ist, ohne dass zus√§tzliche Bandbreite f√ºr das Herunterladen gro√üer Schriftdateien ben√∂tigt wird.

Wenn du deiner Starlight-Website eine eigene Schriftart hinzuf√ºgen musst, kannst du die Schriftarten in eigenen CSS-Dateien oder mit anderen [Astro-Styling-Techniken](https://docs.astro.build/de/guides/styling/) einrichten.

### Schriftarten einrichten

Wenn du bereits √ºber Schriftartdateien verf√ºgst, folge der [Anleitung zum Einrichten lokaler Schriftartdateien](#lokale-schriftartendateien-einrichten).
Um Google Fonts zu verwenden, folge der [Anleitung Fontsource einrichten](#einrichten-einer-fontsource-schriftart).

#### Lokale Schriftartendateien einrichten

<Steps>

1. F√ºge deine Schriftdateien in ein `src/fonts/`-Verzeichnis ein und erstelle eine leere `font-face.css`-Datei:

   <FileTree>

   - src/
     - content/
     - fonts/
       - **CustomFont.woff2**
       - **font-face.css**
   - astro.config.mjs

   </FileTree>

2. F√ºge eine [`@font-face`-Deklaration](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) f√ºr jede deiner Schriftarten in `src/fonts/font-face.css` ein.
   Verwende einen relativen Pfad zu der Schriftartdatei in der Funktion `url()`.

   ```css
   /* src/fonts/font-face.css */

   @font-face {
   	font-family: 'Custom Font';
   	/* Verwende einen relativen Pfad zur lokalen Schriftdatei in `url()`. */
   	src: url('./CustomFont.woff2') format('woff2');
   	font-weight: normal;
   	font-style: normal;
   	font-display: swap;
   }
   ```

3. F√ºge den Pfad zu deiner `font-face.css`-Datei zu Starlights `customCss`-Array in `astro.config.mjs` hinzu:

   ```diff lang="js"
   // astro.config.mjs
   import { defineConfig } from 'astro/config';
   import starlight from '@astrojs/starlight';

   export default defineConfig({
   	integrations: [
   		starlight({
   			title: 'Dokumentation mit benutzerdefinierter Schriftart',
   			customCss: [
   +				// Relativer Pfad zu Ihrer @font-face CSS-Datei.
   +				'./src/fonts/font-face.css',
   			],
   		}),
   	],
   });
   ```

</Steps>

#### Einrichten einer Fontsource-Schriftart

Das [Fontsource](https://fontsource.org/) Projekt vereinfacht die Verwendung von Google Fonts und anderen Open-Source-Schriften.
Es bietet npm-Module, die du f√ºr die gew√ºnschten Schriftarten installieren kannst, und enth√§lt fertige CSS-Dateien, die du deinem Projekt hinzuf√ºgen kannst.

<Steps>

1.  Suche die Schriftart, die du verwenden m√∂chten, im [Fontsource-Katalog](https://fontsource.org/).
    In diesem Beispiel wird [IBM Plex Serif](https://fontsource.org/fonts/ibm-plex-serif) verwendet.

2.  Installiere das Paket f√ºr deine gew√§hlte Schriftart.
    Du findest den Namen des Pakets, indem du auf der Fontsource-Website auf `Installieren` klickst.

         <Tabs syncKey="pkg">

    <TabItem label="npm">

    ```sh
    npm install @fontsource/ibm-plex-serif
    ```

           </TabItem>

        <TabItem label="pnpm">

    ```sh
    pnpm add @fontsource/ibm-plex-serif
    ```

           </TabItem>

        <TabItem label="Yarn">

    ```sh
    yarn add @fontsource/ibm-plex-serif
    ```

           </TabItem>

      </Tabs>

3.  F√ºge die CSS-Dateien von Fontsource zum Array `customCss` von Starlight in `astro.config.mjs` hinzu:

    ```diff lang="js"
    // astro.config.mjs
    import { defineConfig } from 'astro/config';
    import starlight from '@astrojs/starlight';

    export default defineConfig({
    	integrations: [
    		starlight({
    			title: 'Dokumentation mit benutzerdefinierter Schriftart',
    			customCss: [
    +				// Schriftquelldateien f√ºr normale und halbfette Schriftschnitte.
    +				'@fontsource/ibm-plex-serif/400.css',
    +				'@fontsource/ibm-plex-serif/600.css',
    			],
    		}),
    	],
    });
    ```

    Fontsource liefert mehrere CSS-Dateien f√ºr jede Schriftart. Siehe die [Fontsource-Dokumentation](https://fontsource.org/docs/getting-started/install#4-weights-and-styles) √ºber das Einbinden verschiedener Schriftst√§rken und Styles, um zu verstehen, welche zu verwenden sind.

</Steps>

### Schriftarten verwenden

Um deine eingerichtete Schriftart auf deiner Website anzuwenden, verwende den Namen der gew√§hlten Schriftart in einer [benutzerdefinierten CSS-Datei](/de/guides/css-and-tailwind/#benutzerdefinierte-css-styles-stile).
Um zum Beispiel die Standard-Schriftart von Starlight √ºberall zu √ºberschreiben, setze die benutzerdefinierte Eigenschaft `--sl-font`:

```css
/* src/styles/custom.css */

:root {
	--sl-font: 'IBM Plex Serif', serif;
}
```

Du kannst auch spezifischeres CSS schreiben, wenn du deine Schriftart selektiver anwenden willst.
Zum Beispiel, um eine Schriftart nur auf den Hauptinhalt zu setzen, aber nicht auf die Seitennavigation:

```css
/* src/styles/custom.css */

main {
	font-family: 'IBM Plex Serif', serif;
}
```

Folge der [Anleitung f√ºr benutzerdefiniertes CSS-Styles](/de/guides/css-and-tailwind/#benutzerdefinierte-css-styles-stile), um deine Styles zu deiner Website hinzuzuf√ºgen.
